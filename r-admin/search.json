[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R Manuals :: R Installation and Administration",
    "section": "",
    "text": "R Installation and Administration\nThis is a guide to installation and administration for R.\nThis manual is for R, version 4.4.0 Under development.\nCopyright © 2001–2023 R Core Team\n\nPermission is granted to make and distribute verbatim copies of this manual provided the copyright notice and this permission notice are preserved on all copies.\nPermission is granted to copy and distribute modified versions of this manual under the conditions for verbatim copying, provided that the entire resulting derived work is distributed under the terms of a permission notice identical to this one.\nPermission is granted to copy and distribute translations of this manual into another language, under the above conditions for modified versions, except that this permission notice may be stated in a translation approved by the R Core Team."
  },
  {
    "objectID": "Obtaining-R.html#getting-and-unpacking-the-sources",
    "href": "Obtaining-R.html#getting-and-unpacking-the-sources",
    "title": "1  Obtaining R",
    "section": "1.1 Getting and unpacking the sources",
    "text": "1.1 Getting and unpacking the sources\nThe simplest way is to download the most recent R-x.y.z.tar.gz file, and unpack it with\ntar -xf R-x.y.z.tar.gz\non systems that have a suitable1 tar installed. On other systems you need to have the gzip program installed, when you can use1 e.g. GNU tar version 1.15 or later, or that from the libarchive (as used on macOS) or ‘Heirloom Toolchest’ distributions.\ngzip -dc R-x.y.z.tar.gz | tar -xf -\nThe pathname of the directory into which the sources are unpacked should not contain spaces, as most make programs (and specifically GNU make) do not expect spaces.\nIf you want the build to be usable by a group of users, set umask before unpacking so that the files will be readable by the target group (e.g., umask 022 to be usable by all users). Keep this setting of umask whilst building and installing.\nIf you use a fairly recent GNU version of tar and do this as a root account (which on Windows includes accounts with administrator privileges) you may see many warnings about changing ownership. In which case you can use\ntar --no-same-owner -xf R-x.y.z.tar.gz\nand perhaps also include the option --no-same-permissions. (These options can also be set in the TAR_OPTIONS environment variable: if more than one option is included they should be separated by spaces.)"
  },
  {
    "objectID": "Obtaining-R.html#getting-patched-and-development-versions",
    "href": "Obtaining-R.html#getting-patched-and-development-versions",
    "title": "1  Obtaining R",
    "section": "1.2 Getting patched and development versions",
    "text": "1.2 Getting patched and development versions\nA patched version of the current release, r-patched, and the current development version, r-devel, are available as daily tarballs and via access to the R Subversion repository. (For the two weeks prior to the release of a minor (4.x.0) version, r-patched tarballs may refer to beta/release candidates of the upcoming release, the patched version of the current release being available via Subversion.)\nThe tarballs are available from https://stat.ethz.ch/R/daily/. Download R-patched.tar.gz or R-devel.tar.gz (or the .tar.bz2 versions) and unpack as described in the previous section. They are built in exactly the same way as distributions of R releases.\n\n1.2.1 Using Subversion and rsync\nSources are also available via https://svn.R-project.org/R/, the R Subversion repository. If you have a Subversion client (see https://subversion.apache.org/), you can check out and update the current r-devel from https://svn.r-project.org/R/trunk/ and the current r-patched from https://svn.r-project.org/R/branches/R-x-y-branch/ (where x and y are the major and minor number of the current released version of R). E.g., use\nsvn checkout https://svn.r-project.org/R/trunk/ path\nto check out r-devel into directory path (which will be created if necessary). The alpha, beta and RC versions of an upcoming x.y.0 release are available from https://svn.r-project.org/R/branches/R-x-y-branch/ in the four-week period prior to the release.\nNote that https: is required2, and that the SSL certificate for the Subversion server of the R project should be recognized as from a trusted source.2 for some Subversion clients http: may appear to work, but requires continual redirection.\nNote that retrieving the sources by e.g. wget -r or svn export from that URL will not work (and will give a error early in the make process): the Subversion information is needed to build R.\nThe Subversion repository does not contain the current sources for the recommended packages, which can be obtained by rsync or downloaded from CRAN. To use rsync to install the appropriate sources for the recommended packages, run ./tools/rsync-recommended from the top-level directory of the R sources.\nIf downloading manually from CRAN, do ensure that you have the correct versions of the recommended packages: if the number in the file VERSION is x.y.z you need to download the contents of https://CRAN.R-project.org/src/contrib/dir, where dir is x.y.z/Recommended for r-devel or x.y-patched/Recommended for r-patched, respectively, to directory src/library/Recommended in the sources you have unpacked. After downloading manually you need to execute tools/link-recommended from the top level of the sources to make the requisite links in src/library/Recommended. A suitable incantation from the top level of the R sources using wget might be (for the correct value of dir)\nwget -r -l1 --no-parent -A\\*.gz -nd -P src/library/Recommended \\\n  https://CRAN.R-project.org/src/contrib/dir\n./tools/link-recommended\nFootnotes"
  },
  {
    "objectID": "Installing-R-under-Unix-alikes.html#simple-compilation",
    "href": "Installing-R-under-Unix-alikes.html#simple-compilation",
    "title": "2  Installing R under Unix-alikes",
    "section": "2.1 Simple compilation",
    "text": "2.1 Simple compilation\nFirst review the essential and useful tools and libraries in Essential and useful other programs under a Unix-alike, and install those you want or need. Ensure that either the environment variable TMPDIR is either unset (and /tmp exists and can be written in and scripts can be executed from) or points to the absolute path to a valid temporary directory (one from which execution of scripts is allowed) which does not contain spaces.\nChoose a directory to install the R tree (R is not just a binary, but has additional data sets, help files, font metrics etc). Let us call this place R_HOME. Untar the source code. This should create directories src, doc, and several more under a top-level directory: change to that top-level directory (At this point North American readers should consult Setting paper size.) Issue the following commands:\n./configure\nmake\n(See Using make if your make is not called make.) Users of Debian-based 64-bit systems2 may need2 which use lib rather than lib64 for their primary 64-bit library directories: attempts are made to detect such systems.\n./configure LIBnn=lib\nmake\nThen check the built system works correctly by\nmake check\nFailures are not necessarily problems as they might be caused by missing functionality, but you should look carefully at any reported discrepancies. (Some non-fatal errors are expected in locales that do not support Latin-1, in particular in true C locales and non-UTF-8 non-Western-European locales.) A failure in tests/ok-errors.R may indicate inadequate resource limits (see Running R).\nMore comprehensive testing can be done by\nmake check-devel\nor\nmake check-all\nsee Testing an Installation for the possibilities of doing this in parallel. Note that these checks are only run completely if the recommended packages are installed. If you have a local CRAN mirror, these checks can be speeded up by either setting environment variable R_CRAN_WEB to its URL, or having a file .R/repositories specifying it (see ?setRepositories).\nParallel make is supported for building R but not for the check targets (as the output is likely to be unreadably interleaved, although where supported3 GNU make’s -O may help).3 not by the version supplied by macOS.\nIf the configure and make commands execute successfully, a shell-script front-end called R will be created and copied to R_HOME/bin. You can link or copy this script to a place where users can invoke it, for example to /usr/local/bin/R. You could also copy the man page R.1 to a place where your man reader finds it, such as /usr/local/man/man1. If you want to install the complete R tree to, e.g., /usr/local/lib/R, see Installation. Note: you do not need to install R: you can run it from where it was built.\nYou do not necessarily have to build R in the top-level source directory (say, TOP_SRCDIR). To build in BUILDDIR, run\ncd BUILDDIR\nTOP_SRCDIR/configure\nmake\nand so on, as described further below. This has the advantage of always keeping your source tree clean and is particularly recommended when you work with a version of R from Subversion. (You may need GNU make to allow this, and you will need no spaces in the path to the build directory. It is unlikely to work if the source directory has previously been used for a build.)\nThere are many settings which can be customized when building R and most are described in the file config.site in the top-level source directory. This can be edited, but for an installation using BUILDDIR it is better to put the changed settings in a newly-created file config.site in the build directory.\nNow rehash if necessary, type R, and read the R manuals and the R FAQ (files FAQ or doc/manual/R-FAQ.html, or https://CRAN.R-project.org/doc/FAQ/R-FAQ.html which always has the version for the latest release of R).\nNote: if you already have R installed, check that where you installed R replaces or comes earlier in your path than the previous installation. Some systems are set up to have /usr/bin (the standard place for a system installation) ahead of /usr/local/bin (the default place for installation of R) in their default path, and some do not have /usr/local/bin on the default path."
  },
  {
    "objectID": "Installing-R-under-Unix-alikes.html#help-options",
    "href": "Installing-R-under-Unix-alikes.html#help-options",
    "title": "2  Installing R under Unix-alikes",
    "section": "2.2 Help options",
    "text": "2.2 Help options\nR by default provides help pages as plain text displayed in a pager, with the options (see the help for help) of displaying help as HTML or PDF.\nBy default HTML help pages are created when needed rather than being built at install time.\nIf you need to disable the server and want HTML help, there is the option to build HTML pages when packages are installed (including those installed with R). This is enabled by the configure option --enable-prebuilt-html. Whether R CMD INSTALL (and hence install.packages) pre-builds HTML pages is determined by looking at the R installation and is reported by R CMD INSTALL --help: it can be overridden by specifying one of the INSTALL options --html or --no-html.\nThe server is disabled by setting the environment variable R_DISABLE_HTTPD to a non-empty value, either before R is started or within the R session before HTML help (including help.start) is used. It is also possible that system security measures will prevent the server from being started, for example if the loopback interface has been disabled. See ?tools::startDynamicHelp for more details."
  },
  {
    "objectID": "Installing-R-under-Unix-alikes.html#making-the-manuals",
    "href": "Installing-R-under-Unix-alikes.html#making-the-manuals",
    "title": "2  Installing R under Unix-alikes",
    "section": "2.3 Making the manuals",
    "text": "2.3 Making the manuals\nThere is a set of manuals that can be built from the sources,\n\nfullrefman\n\nPrinted versions of all the help pages for base and recommended packages (around 3750 pages).\n\nrefman\n\nPrinted versions of the help pages for selected base packages (around 2200 pages)\n\nR-FAQ\n\nR FAQ\n\nR-intro\n\n“An Introduction to R”.\n\nR-data\n\n“R Data Import/Export”.\n\nR-admin\n\n“R Installation and Administration”, this manual.\n\nR-exts\n\n“Writing R Extensions”.\n\nR-lang\n\n“The R Language Definition”.\n\n\nTo make these (with fullrefman rather than refman), use\nmake pdf      to create PDF versions\nmake info     to create info files (not ‘refman’ nor ‘fullrefman’).\nYou will not be able to build any of these unless you have texi2any version 5.1 or later installed, and for PDF you must have texi2dvi and texinfo.tex installed (which are part of the GNU texinfo distribution but are, especially texinfo.tex, often made part of the TeX package in re-distributions). The path to texi2any can be set by macro TEXI2ANY in config.site. NB: texi2any requires perl.\nThe PDF versions can be viewed using any recent PDF viewer: they have hyperlinks that can be followed. The info files are suitable for reading online with Emacs or the standalone GNU info program. The PDF versions will be created using the paper size selected at configuration (default ISO a4): this can be overridden by setting R_PAPERSIZE on the make command line, or setting R_PAPERSIZE in the environment and using make -e. (If re-making the manuals for a different paper size, you should first delete the file doc/manual/version.texi. The usual value for North America would be letter.)\nThere are some issues with making the PDF reference manual, fullrefman.pdf or refman.pdf. The help files contain both non-ASCII characters (e.g. in text.Rd) and upright quotes, neither of which are contained in the standard LaTeX Computer Modern fonts. We have provided the following alternatives:\n\ntimes\n\n(The default.) Using standard PostScript fonts, Times Roman, Helvetica and Courier. This works well both for on-screen viewing and for printing. One disadvantage is that the Usage and Examples sections may come out rather wide: this can be overcome by using in addition either of the options inconsolata (on a Unix-alike only if found by configure) or beramono, which replace the Courier monospaced font by Inconsolata or Bera Sans mono respectively. (You will need the LaTeX package inconsolata4 or bera installed.)4 Instructions on how to install the latest version are at https://www.ctan.org/tex-archive/fonts/inconsolata/.\nNote that in most LaTeX installations this will not actually use the standard fonts for PDF, but rather embed the URW clones NimbusRom, NimbusSans and (for Courier, if used) NimbusMon.\nThis needs LaTeX packages times, helvetic and (if used) courier installed.\n\nlm\n\nUsing the Latin Modern fonts. These are not often installed as part of a TeX distribution, but can obtained from https://www.ctan.org/tex-archive/fonts/ps-type1/lm/ and mirrors. This uses fonts rather similar to Computer Modern, but is not so good on-screen as times.\n\n\nThe default can be overridden by setting the environment variable R_RD4PDF. (On Unix-alikes, this will be picked up at install time and stored in etc/Renviron, but can still be overridden when the manuals are built, using make -e.) The usual5 default value for R_RD4PDF is times,inconsolata,hyper: omit inconsolata if you do not have LaTeX package inconsolata installed. As from R 4.2.0, hyper is always enabled (with a fallback if LaTeX package hyperref is not installed).5 on a Unix-alike, inconsolata is omitted if not found by configure.\nFurther options, e.g for hyperref, can be included in a file Rd.cfg somewhere on your LaTeX search path. For example, if you prefer to hyperlink the text and not the page number in the table of contents use\n\\ifthenelse{\\boolean{Rd@use@hyper}}{\\hypersetup{linktoc=section}}{}\nor\n\\ifthenelse{\\boolean{Rd@use@hyper}}{\\hypersetup{linktoc=all}}{}\nto hyperlink both text and page number.\nAny generated PDF manuals can be compacted by\nmake compact-pdf\nprovided qpdf and gs are available (see ?tools::compactPDF for how to specify them if not on the path).\nEbook versions of most of the manuals in one or both of .epub and .mobi formats can be made by running in doc/manual one of\nmake ebooks\nmake epub\nmake mobi\nThis requires ebook-convert from Calibre, or from most Linux distributions. If necessary the path to ebook-convert can be set as make macro EBOOK by editing doc/manual/Makefile (which contains a commented value suitable for macOS) or using make -e."
  },
  {
    "objectID": "Installing-R-under-Unix-alikes.html#installation",
    "href": "Installing-R-under-Unix-alikes.html#installation",
    "title": "2  Installing R under Unix-alikes",
    "section": "2.4 Installation",
    "text": "2.4 Installation\nTo ensure that the installed tree is usable by the right group of users, set umask appropriately (perhaps to 022) before unpacking the sources and throughout the build process.\nAfter\n./configure\nmake\nmake check\n(or, when building outside the source, TOP_SRCDIR/configure, etc) have been completed successfully, you can install the complete R tree to your system by typing\nmake install\nA parallel make can be used (but run make before make install). Those using GNU make 4.0 or later may want to use make -j n -O to avoid interleaving of output.\nThis will install to the following directories:\n\nprefix/bin or bindir\n\nthe front-end shell script and other scripts and executables\n\nprefix/man/man1 or mandir/man1\n\nthe man page\n\nprefix/LIBnn/R or libdir/R\n\nall the rest (libraries, on-line help system, …). Here LIBnn is usually lib, but may be lib64 on some 64-bit Linux systems. This is known as the R home directory.\n\n\nwhere prefix is determined during configuration (typically /usr/local) and can be set by running configure with the option --prefix, as in\n./configure --prefix=/where/you/want/R/to/go\nwhere the value should be an absolute path. This causes make install to install the R script to /where/you/want/R/to/go/bin, and so on. The prefix of the installation directories can be seen in the status message that is displayed at the end of configure. The installation may need to be done by the owner of prefix, often a root account.\nThere is the option of using make install-strip (see Debugging Symbols).\nYou can install into another directory tree by using\nmake prefix=/path/to/here install\nat least with GNU make (but not some other Unix makes).\nMore precise control is available at configure time via options: see configure --help for details. (However, most of the ‘Fine tuning of the installation directories’ options are not used by R.)\nConfigure options --bindir and --mandir are supported and govern where a copy of the R script and the man page are installed.\nThe configure option --libdir controls where the main R files are installed: the default is eprefix/LIBnn, where eprefix is the prefix used for installing architecture-dependent files, defaults to prefix, and can be set via the configure option --exec-prefix.\nEach of bindir, mandir and libdir can also be specified on the make install command line (at least for GNU make).\nThe configure or make variables rdocdir and rsharedir can be used to install the system-independent doc and share directories to somewhere other than libdir. The C header files can be installed to the value of rincludedir: note that as the headers are not installed into a subdirectory you probably want something like rincludedir=/usr/local/include/R-4.4.0 Under development.\nIf you want the R home to be something other than libdir/R, use rhome: for example\nmake install rhome=/usr/local/lib64/R-4.4.0 Under development\nwill use a version-specific R home on a non-Debian Linux 64-bit system.\nIf you have made R as a shared/static library you can install it in your system’s library directory by\nmake prefix=/path/to/here install-libR\nwhere prefix is optional, and libdir will give more precise control.6 However, you should not install to a directory mentioned in LDPATHS (e.g. /usr/local/lib64) if you intend to work with multiple versions of R, since that directory may be given precedence over the lib directory of other R installations.6 This will be needed if more than one sub-architecture is to be installed.\nmake install-strip\nwill install stripped executables, and on platforms where this is supported, stripped libraries in directories lib and modules and in the standard packages.\nNote that installing R into a directory whose path contains spaces is not supported, and some aspects (such as installing source packages) will not work.\nTo install info and PDF versions of the manuals, use one or both of\nmake install-info\nmake install-pdf\nOnce again, it is optional to specify prefix, libdir or rhome (the PDF manuals are installed under the R home directory).\nMore precise control is possible. For info, the setting used is that of infodir (default prefix/info, set by configure option --infodir). The PDF files are installed into the R doc tree, set by the make variable rdocdir.\nA staged installation is possible, that it is installing R into a temporary directory in order to move the installed tree to its final destination. In this case prefix (and so on) should reflect the final destination, and DESTDIR should be used: see https://www.gnu.org/prep/standards/html_node/DESTDIR.html.\nYou can optionally install the run-time tests that are part of make check-all by\nmake install-tests\nwhich populates a tests directory in the installation."
  },
  {
    "objectID": "Installing-R-under-Unix-alikes.html#uninstallation",
    "href": "Installing-R-under-Unix-alikes.html#uninstallation",
    "title": "2  Installing R under Unix-alikes",
    "section": "2.5 Uninstallation",
    "text": "2.5 Uninstallation\nYou can uninstall R by\nmake uninstall\noptionally specifying prefix etc in the same way as specified for installation.\nThis will also uninstall any installed manuals. There are specific targets to uninstall info and PDF manuals in file doc/manual/Makefile.\nTarget uninstall-tests will uninstall any installed tests, as well as removing the directory tests containing the test results.\nAn installed shared/static libR can be uninstalled by\nmake prefix=/path/to/here uninstall-libR"
  },
  {
    "objectID": "Installing-R-under-Unix-alikes.html#sub-architectures",
    "href": "Installing-R-under-Unix-alikes.html#sub-architectures",
    "title": "2  Installing R under Unix-alikes",
    "section": "2.6 Sub-architectures",
    "text": "2.6 Sub-architectures\nNow 32-bit builds are unsupported, this section is only of historical interest, although in future the mechanisms could be used for different CPU types on the same OS (e.g. x86_64 and aarch64).\nSome platforms can support closely related builds of R which can share all but the executables and dynamic objects. Examples include builds under Linux for different CPUs or 32- and 64-bit builds.\nR supports the idea of architecture-specific builds, specified by adding r_arch=name to the configure line. Here name can be anything non-empty, and is used to name subdirectories of lib, etc, include and the package libs subdirectories. Example names from other software are the use of sparcv9 on Sparc Solaris and 32 by gcc on x86_64 Linux.\nIf you have two or more such builds you can install them over each other (and for 32/64-bit builds on one architecture, one build can be done without r_arch). The space savings can be considerable: on x86_64 Linux a basic install (without debugging symbols) took 74Mb, and adding a 32-bit build added 6Mb. If you have installed multiple builds you can select which build to run by\nR --arch=name\nand just running R will run the last build that was installed.\nR CMD INSTALL will detect if more than one build is installed and try to install packages with the appropriate library objects for each. This will not be done if the package has an executable configure script or a src/Makefile file. In such cases you can install for extra builds by\nR --arch=name CMD INSTALL --libs-only pkg1 pkg2 ...\nIf you want to mix sub-architectures compiled on different platforms (for example x86_64 Linux and i686 Linux), it is wise to use explicit names for each, and you may also need to set libdir to ensure that they install into the same place.\nWhen sub-architectures are used the version of Rscript in e.g. /usr/bin will be the last installed, but architecture-specific versions will be available in e.g. /usr/lib64/R/bin/exec${R_ARCH}. Normally all installed architectures will run on the platform so the architecture of Rscript itself does not matter. The executable Rscript will run the R script, and at that time the setting of the R_ARCH environment variable determines the architecture which is run.\nWhen running post-install tests with sub-architectures, use\nR --arch=name CMD make check[-devel|all]\nto select a sub-architecture to check.\nSub-architectures were also used on Windows, but by selecting executables within the appropriate bin directory, R_HOME/bin/x64. For backwards compatibility there are executables R_HOME/bin/R.exe and R_HOME/bin/Rscript.exe: these will run an executable from one of the subdirectories, which one being taken first from the R_ARCH environment variable, then from the --arch command-line option7 and finally from the installation default (which is 32-bit for a combined 32/64 bit R installation). R 4.2.0 follows the scheme, but supports and includes only 64-bit builds.7 with possible values i386, x64, 32 and 64."
  },
  {
    "objectID": "Installing-R-under-Unix-alikes.html#other-options",
    "href": "Installing-R-under-Unix-alikes.html#other-options",
    "title": "2  Installing R under Unix-alikes",
    "section": "2.7 Other Options",
    "text": "2.7 Other Options\nThere are many other installation options, most of which are listed by configure --help. Almost all of those not listed elsewhere in this manual are either standard autoconf options not relevant to R or intended for specialist uses by the R developers.\nOne that may be useful when working on R itself is the option --disable-byte-compiled-packages, which ensures that the base and recommended packages are not byte-compiled. (Alternatively the (make or environment) variable R_NO_BASE_COMPILE can be set to a non-empty value for the duration of the build.)\nOption --with-internal-tzcode makes use of R’s own code and copy of the IANA database for managing timezones. This will be preferred where there are issues with the system implementation, usually involving times after 2037 or before 1916. An alternative time-zone directory8 can be used, pointed to by environment variable TZDIR: this should contain files such as Europe/London. On all tested OSes the system timezone was deduced correctly, but if necessary it can be set as the value of environment variable TZ.8 How to prepare such a directory is described in file src/extra/tzone/Notes in the R sources.\nOptions --with-internal-iswxxxxx, --with-internal-towlower and --with-internal-wcwidth were introduced in R 4.1.0. These control the replacement of the system wide-character classification (such as iswprint), case-changing (wctrans) and width (wcwidth and wcswidth) functions by ones contained in the R sources. Replacement of the classification functions has been done for many years on macOS and AIX (and Windows): option --with-internal-iswxxxxx allows this to be suppressed on those platforms or used on others. Replacing the case-changing functions was new in R 4.1.0 and the default on macOS (and on Windows since R 4.2.0). Replacement of the width functions has also been done for many years and remains the default. These options will only matter to those working with non-ASCII character data, especially in languages written in a non-Western script9 (which includes ‘symbols’ such as emoji). Note that one of those iswxxxxx is iswprint which is used to decide whether to output a character as a glyph or as a \\U{xxxxxx} escape—for example, try \"\\U1f600\", an emoji. The width functions are of most importance in East Asian locale: their values differ between such locales. (Replacing the system functions provides a degree of platform-independence (including to OS updates) but replaces it with a dependence on the R version.)9 But on Windows problems have been seen with case-changing functions on accented Latin-1 characters.\n\n2.7.1 Debugging Symbols\nBy default, configure adds a flag (usually -g) to the compilation flags for C, Fortran and CXX sources. This will slow down compilation and increase object sizes of both R and packages, so it may be a good idea to change those flags (set CFLAGS etc in config.site before configuring, or edit files Makeconf and etc/Makeconf between running configure and make).\nHaving debugging symbols available is useful both when running R under a debugger (e.g., R -d gdb) and when using sanitizers and valgrind, all things intended for experts.\nDebugging symbols (and some others) can be ‘stripped’ on installation by using\nmake install-strip\nHow well this is supported depends on the platform: it works best on those using GNU binutils. On x86_64 Linux a typical reduction in overall size was from 92MB to 66MB. On macOS debugging symbols are not by default included in .dylib and .so files, so there is negligible difference.\n\n\n2.7.2 OpenMP Support\nBy default configure searches for suitable flags10 for OpenMP support for the C, C++ (default standard) and Fortran compilers.10 for example, -fopenmp, -fiopenmp, -xopenmp or -qopenmp. This includes for clang and the Intel and Oracle compilers.\nOnly the C result is currently used for R itself, and only if MAIN_LD/DYLIB_LD were not specified. This can be overridden by specifying\nR_OPENMP_CFLAGS\nUse for packages has similar restrictions (involving SHLIB_LD and similar: note that as Fortran code is by default linked by the C (or C++) compiler, both need to support OpenMP) and can be overridden by specifying some of\nSHLIB_OPENMP_CFLAGS\nSHLIB_OPENMP_CXXFLAGS\nSHLIB_OPENMP_FFLAGS\nSetting these to an empty value will disable OpenMP for that compiler (and configuring with --disable-openmp will disable all detection11 of OpenMP). The configure detection test is to compile and link a standalone OpenMP program, which is not the same as compiling a shared object and loading it into the C program of R’s executable. Note that overridden values are not tested.11 This does not necessarily disable use of OpenMP – the configure code allows for platforms where OpenMP is used without a flag. For the flang compiler in late 2017, the Fortran runtime always used OpenMP.\n\n\n2.7.3 C++ Support\nC++ is not used by R itself, but support is provided for installing packages with C++ code via make macros defined in file etc/Makeconf (and with explanations in file config.site):\nCXX\nCXXFLAGS\nCXXPICFLAGS\nCXXSTD\n\nCXX11\nCXX11STD\nCXX11FLAGS\nCXX11PICFLAGS\n\nCXX14\nCXX14STD\nCXX14FLAGS\nCXX14PICFLAGS\n\nCXX17\nCXX17STD\nCXX17FLAGS\nCXX17PICFLAGS\n\nCXX20\nCXX20STD\nCXX20FLAGS\nCXX20PICFLAGS\n\nCXX23\nCXX23STD\nCXX23FLAGS\nCXX23PICFLAGS\nThe macros CXX etc are those used by default for C++ code. configure will attempt to set the rest suitably, choosing for CXXSTD and CXX11STD a suitable flag such as -std=c++11 for C++11 support (which is required if C++ is to be supported at all). inferred values can be overridden in file config.site or on the configure command line: user-supplied values will be tested by compiling some C++11/14/17/20/23 code.\nIt may be that there is no suitable flag for C++14/17/20/23 support with the default compiler, in which case a different compiler could be selected for CXX14/CXX17/CXX20/CXX23 with its corresponding flags.\nThe -std flag is supported by the GCC, clang++ and Intel compilers. Currently accepted values are (plus some synonyms)\ng++:     c++11 gnu+11 c++14 gnu++14 c++17 gnu++17 c++2a gnu++2a (from 8)\n         c++20 gnu++20 (from 10) c++23 gnu++23 c++2b gnu++2b (from 11)\nIntel:   c++11  gnu+11 c++14 gnu++14 c++17 gnu++17\n         c++20 gnu++20 (from 2021.1) c++2b gnu++2b (from 2022.2)\n(Those for LLVM clang++ are documented at https://clang.llvm.org/cxx_status.html, and follow g++: -std=c++20 is supported from Clang 10, -std=c++2b from Clang 13. Apple Clang supports -std=c++2b from 13.1.6.)\n‘Standards’ for g++ starting with gnu enable ‘GNU extensions’: what those are is hard to track down.\nFor the use of C++11 and later in R packages see the ‘Writing R Extensions’ manual. Prior to R 3.6.0 the default C++ standard was that of the compiler used: currently it is C++17 (if available): this can be overridden by setting CXXSTD when R is configured.\nhttps://en.cppreference.com/w/cpp/compiler_support indicates which versions of common compilers support (parts of) which C++ standards. GCC 5 was the minimum version with sufficient C++14 support. GCC introduced C++17 support gradually, but version 7 should suffice.\n\n\n2.7.4 C standards\nCompiling R requires C99 or later: C11 and C17 are minor updates, but the substantial update planned for ‘C23’ (now expected ca April 2024) will also be supported.\nAs from R 4.3.0 there is support for packages to indicate their preferred C version. Macros CC17, C17FLAGS, CC23 and C23FLAGS can be set in config.site (there are examples there). Those for C17 should support C17 or earlier and not allow C23 additions so for example bool, true and false can be used as identifiers. Those for C23 should support new types such as bool.\nSome compilers warn enthusiastically about prototypes. For most, omitting -Wstrict-prototypes in C17FLAGS suffices. However, versions 15 and later of LLVM clang and 14.0.3 and later of Apple clang warn by default in all modes if -Wall or -pedantic is used, and may need -Wno-strict-prototypes.\n\n\n2.7.5 Link-Time Optimization\nThere is support for using link-time optimization (LTO) if the toolchain supports it: configure with flag --enable-lto. When LTO is enabled it is used for compiled code in add-on packages unless the flag --enable-lto=R is used12.12 Then recommended packages installed as part of the R installation do use LTO, but not packages installed later.\nThe main benefit seen to date from LTO has been detecting long-standing bugs in the ways packages pass arguments to compiled code and between compilation units. Benchmarking in 2020 with gcc/gfortran 10 showed gains of a few percent in increased performance and reduction in installed size for builds without debug symbols, but large size reductions for some packages13 with debug symbols. (Performance and size gains are said to be most often seen in complex C++ builds.)13 A complete CRAN installation reduced from 50 to 35GB.\nWhether toolchains support LTO is often unclear: all of the C compiler, the Fortran compiler14 and linker have to support it, and support it by the same mechanism (so mixing compiler families may not work and a non-default linker may be needed). It has been supported by the GCC and LLVM projects for some years with diverging implementations.14 although there is the possibility to exclude Fortran but that misses some of the benefits.\nLTO support was added in 2011 for GCC 4.5 on Linux but was little used before 2019: compiler support has steadily improved over those years and --enable-lto=R is nowadays used for some routine CRAN checking.\nUnfortunately --enable-lto may be accepted but silently do nothing useful if some of the toolchain does not support LTO: this is less common than it once was.\nVarious macros can be set in file config.site to customize how LTO is used. If the Fortran compiler is not of the same family as the C/C++ compilers, set macro LTO_FC (probably to empty). Macro LTO_LD can be used to select an alternative linker should that be needed.\n\n\n2.7.6 LTO with GCC\nThis has been tested on Linux with gcc/gfortran 8 and later: that needed setting (e.g. in config.site)\nAR=gcc-ar\nRANLIB=gcc-ranlib\nFor non-system compilers or if those wrappers have not been installed one may need something like\nAR=\"ar --plugin=/path/to/liblto_plugin.so\"\nRANLIB=\"ranlib --plugin=/path/to/liblto_plugin.so\"\namd NM may be needed to be set analogously. (If using an LTO-enabled build to check packages, set environment variable UserNM15 to gcc-nm.)15 not NM as we found make overriding that.\nWith GCC 5 and later it is possible to parallelize parts of the LTO linking process: set the make macro LTO to something like LTO=-flto=8 (to use 8 threads), for example in file config.site.\nUnder some circumstances and for a few packages, the PIC flags have needed overriding on Linux with GCC 9 and later: e.g use in config.site:\nCPICFLAGS=-fPIC\nCXXPICFLAGS=-fPIC\nCXX11PICFLAGS=-fPIC\nCXX14PICFLAGS=-fPIC\nCXX17PICFLAGS=-fPIC\nCXX20PICFLAGS=-fPIC\nFPICFLAGS=-fPIC\nWe suggest only using these if the problem is encountered (it was not seen on CRAN with GCC 10 at the time of writing).\nNote that R may need to be re-compiled after even a minor update to the compiler (e.g. from 10.1 to 10.2) but this may not be clear from confused compiler messages.\n\n\n2.7.7 LTO with LLVM\nLLVM supports another type of LTO called ‘Thin LTO’ as well as a similar implementation to GCC, sometimes called ‘Full LTO’. (See https://clang.llvm.org/docs/ThinLTO.html.) Currently the LLVM compilers relevant to R are clang and flang for which this can be selected by setting macro LTO=-flto=thin. LLVM has\nAR=llvm-ar\nRANLIB=llvm-ranlib\n(but macOS does not, and these are not needed there). Where the linker supports a parallel backend for Thin LTO this can be specified via the macro LTO_LD: see the URL above for per-linker settings and further linking optimizations.)\nFor example, on macOS one might use\nLTO=-flto=thin\nLTO_FC=\nLTO_LD=-Wl,-mllvm,-threads=4\nto use Thin LTO with 4 threads for C/C++ code, but skip LTO for Fortran code compiled with gfortran.\nIt is said to be particularly beneficial to use -O3 for clang in conjunction with LTO.\nIt seems that flang may support LTO, but with no documentation as yet.\nThe 2020s versions of Intel’s C/C++ compilers are based on LLVM and as such support LLVM-style LTO, both ‘full’ and ‘thin’. This might use something like\nLTO=-flto=thin -flto-jobs=8\n\n\n2.7.8 LTO for package checking\nLTO effectively compiles all the source code in a package as a single compilation unit and so allows the compiler (with sufficient diagnostic flags such as -Wall) to check consistency between what are normally separate compilation units.\nWith gcc/gfortran 9.x and later16 LTO will flag inconsistencies in calls to Fortran subroutines/functions, both between Fortran source files and between Fortran and C/C++. gfortran 8.4, 9.2 and later can help understanding these by extracting C prototypes from Fortran source files with option -fc-prototypes-external, e.g. that (at the time of writing) Fortran LOGICAL corresponds to int_least32_t * in C.16 probably also 8.4 and later."
  },
  {
    "objectID": "Installing-R-under-Unix-alikes.html#testing-an-installation",
    "href": "Installing-R-under-Unix-alikes.html#testing-an-installation",
    "title": "2  Installing R under Unix-alikes",
    "section": "2.8 Testing an Installation",
    "text": "2.8 Testing an Installation\nFull post-installation testing is possible only if the test files have been installed with\nmake install-tests\nwhich populates a tests directory in the installation.\nIf this has been done, two testing routes are available. The first is to move to the home directory of the R installation (as given by R RHOME or from R as R.home()) and run\ncd tests\n## followed by one of\n../bin/R CMD make check\n../bin/R CMD make check-devel\n../bin/R CMD make check-all\nand other useful targets are test-BasePackages and test-Recommended to run tests of the standard and recommended packages (if installed) respectively.\nThis re-runs all the tests relevant to the installed R (including for example the code in the package vignettes), but not for example the ones checking the example code in the manuals nor making the standalone Rmath library. This can occasionally be useful when the operating environment has been changed, for example by OS updates or by substituting the BLAS (see Shared BLAS).\nParallel checking of packages may be possible: set the environment variable TEST_MC_CORES to the maximum number of processes to be run in parallel. This affects both checking the package examples (part of make check) and package sources (part of make check-devel and make check-recommended). It does require a make command which supports the make -j n option: most do.\nAlternatively, the installed R can be run, preferably with --vanilla. Then\npdf(\"tests.pdf\") ## optional, but prevents flashing graphics windows\nSys.setenv(LC_COLLATE = \"C\", LC_TIME = \"C\", LANGUAGE = \"en\")\ntools::testInstalledBasic(\"both\")\ntools::testInstalledPackages(scope = \"base\")\ntools::testInstalledPackages(scope = \"recommended\")\nruns the basic tests and then all the tests on the standard and recommended packages. These tests can be run from anywhere: the basic tests write their results in the tests folder of the R home directory and run fewer tests than the first approach: in particular they do not test things which need Internet access—that can be tested by\ntools::testInstalledBasic(\"internet\")\nIt is possible to test the installed packages (but not their package-specific tests) by testInstalledPackages even if make install-tests was not run. The outputs are written under the current directory unless a different one is specified by outDir.\nNote that the results may depend on the language set for times and messages: for maximal similarity to reference results you may want to try setting (before starting the R session)\nLANGUAGE=en\nand use a UTF-8 or Latin-1 locale.\nFootnotes"
  },
  {
    "objectID": "Installing-R-under-Windows.html#building-from-source",
    "href": "Installing-R-under-Windows.html#building-from-source",
    "title": "3  Installing R under Windows",
    "section": "3.1 Building from source",
    "text": "3.1 Building from source\nIt is possible to use other 64-bit toolchains (including ‘MSYS2’) with UCRT support to build R, but this manual only documents that used for binary distributions of R 4.2.x and later. When using other toolchains, makefiles of R and packages may need to be adapted.\n\n3.1.1 The Windows toolset\nThe binary distribution of R is currently built with tools from Rtools43 for Windows. See Building R and packages for more details on how to use it.\nThe toolset includes compilers (GCC version 12.2.0 with selected additional patches) and runtime libraries from the ‘MinGW-w64’ project and a number of pre-compiled static libraries and headers used by R and R packages, compiled by ‘MXE’ (M cross environment, with updates maintained by Tomas Kalibera). The toolset also includes build tools from the the ‘MSYS2’ project. Additional build tools packaged by ‘MSYS2’ may be installed via a package manager (pacman).\nThe toolsets used for 64-bit Windows from 2008 to 2022 were based on MinGW-w64. The assistance of Yu Gong at a crucial step in porting R to MinGW-w64 is gratefully acknowledged, as well as help from Kai Tietz, the lead developer of the MinGW-w64 project and from Martin Storsjo.\n\n\n3.1.2 LaTeX\nBoth building R and checking packages need a distribution of LaTeX installed, with the directory containing pdflatex on the path.\nThe MiKTeX (https://miktex.org/) distribution of LaTeX is that used on CRAN. This can be set up to install extra packages ‘on the fly’ (without asking), which is the simplest way to use it. The ‘basic’ version of MiKTeX will need to add some packages.1 In any case ensure that the inconsolata package is installed—you can check with the MiKTeX Package Manager.1 There are reports of segfaults when MiKTeX installs additional packages when making NEWS.pdf: re-running make seems to solve this.\nIt is also possible to use the TeX Live distribution from https://www.tug.org/texlive/. (The CRAN package tinytex can install and manage a subset of TeX Live.)"
  },
  {
    "objectID": "Installing-R-under-Windows.html#checking-the-build",
    "href": "Installing-R-under-Windows.html#checking-the-build",
    "title": "3  Installing R under Windows",
    "section": "3.2 Checking the build",
    "text": "3.2 Checking the build\nYou can test a build by running\nmake check\nThe recommended packages can be checked by\nmake check-recommended\nOther levels of checking are\nmake check-devel\nfor a more thorough check of the R functionality, and\nmake check-all\nfor both check-devel and check-recommended.\nIf a test fails, there will almost always be a .Rout.fail file in the directory being checked (often tests/Examples or tests): examine the file to help pinpoint the problem.\nParallel checking of package sources (part of make check-devel and make check-recommended) is possible: see the environment variable TEST_MC_CORES to the maximum number of processes to be run in parallel."
  },
  {
    "objectID": "Installing-R-under-Windows.html#testing-an-installation",
    "href": "Installing-R-under-Windows.html#testing-an-installation",
    "title": "3  Installing R under Windows",
    "section": "3.3 Testing an Installation",
    "text": "3.3 Testing an Installation\nThe Windows installer contains a set of test files used when building R.\nThe toolset is not needed to run these tests, but more comprehensive analysis of errors will be given if diff is in the path.\nLaunch either Rgui or Rterm (preferred), preferably with --vanilla. Then run\nSys.setenv(LC_COLLATE = \"C\", LC_TIME=\"C\", LANGUAGE = \"en\")\ntools::testInstalledBasic(\"both\")\ntools::testInstalledPackages(scope = \"base\")\ntools::testInstalledPackages(scope = \"recommended\")\nruns the basic tests and then all the tests on the standard and recommended packages. These tests can be run from anywhere: testInstalledBasic writes results in the tests folder of the R home directory (as given by R.home()) and testInstalledPackages under the current directory unless a different one is specified by outDir.\nFor the tests folder to be writeable, one normally needs to install R to a directory other than the default C:\\Program Files. The installer also allows to install R without Administrator privileges, see the R Windows FAQ for more details.\nThe results of example(md5sums) when testing tools may differ from the reference output as some files are installed with Windows’ CRLF line endings. Also, expect differences in reg-plot-latin1.pdf.\nOne can also run tests from the toolset shell (e.g. bash) similarly to a Unix-like installation. Move to the home directory of the R installation (as given by R RHOME or from R as R.home()) and run\ncd tests\n## followed by one of\n../bin/R CMD make check\n../bin/R CMD make check-devel\n../bin/R CMD make check-all\nRemember that LaTeX needs to be on the path.\nFootnotes"
  },
  {
    "objectID": "Installing-R-under-macOS.html#running-r-under-macos",
    "href": "Installing-R-under-macOS.html#running-r-under-macos",
    "title": "4  Installing R under macOS",
    "section": "4.1 Running R under macOS",
    "text": "4.1 Running R under macOS\nThere are two ways to run R on macOS from a CRAN binary distribution.\nThere is a GUI console normally installed with the R icon in /Applications which you can run by double-clicking (e.g. from Launchpad or Finder). (If you cannot find it there it was possibly installed elsewhere so try searching for it in Spotlight.) This is usually referred to as R.APP to distinguish it from command-line R: its user manual is currently part of the macOS FAQ at https://cran.r-project.org/bin/macosx/RMacOSX-FAQ.html and can be viewed from R.APP‘s ’Help’ menu.\nYou can run command-line R and Rscript from a Terminal3 so these can be typed as commands as on any other Unix-alike: see the next chapter of this manual. There are some small differences which may surprise users of R on other platforms, notably the default location of the personal library directory (under ~/Library/R, e.g. ~/Library/R/x86_64/4.2/library), and that warnings, messages and other output to stderr are highlighted in bold.3 The installer puts links to R and Rscript in /usr/local/bin. If these are missing or that is not on your path, you can run directly the copies in /Library/Frameworks/R.framework/Resources/bin or link those yourself to somewhere on your path.\nThose using the zsh shell (the default for new user accounts as from Catalina) might find the command R being masked by the zsh builtin r (which recalls commands). One can use a full path to R in an alias, or add disable r to ~/.zshrc.\nIf you have installed both installer packages on an arm64 Mac, the last installed will be used.\nIt has been reported that running R.APP may fail if no preferences are stored, so if it fails when launched for the very first time, try it again (the first attempt will store some preferences).\nUsers of R.APP need to be aware of the ‘App Nap’ feature (https://developer.apple.com/library/archive/releasenotes/MacOSX/WhatsNewInOSX/Articles/MacOSX10_9.html) which can cause R tasks to appear to run very slowly when not producing output in the console. Here are ways to avoid it:\n\nEnsure that the console is completely visible (or at least the activity indicator at the top right corner is visible).\nIn a Terminal, run\ndefaults write org.R-project.R NSAppSleepDisabled -bool YES\n(see https://developer.apple.com/library/archive/releasenotes/MacOSX/WhatsNewInOSX/Articles/MacOSX10_9.html).\n\nUsing the X11 graphics device or the X11-based versions of View() and edit() for data frames and matrices (the latter are the default for command-line R but not R.APP) requires XQuartz to be installed.\nUnder some rather nebulous circumstances messages have been seen from fontconfig about missing/unreadable configuration files when using cairo-based devices, especially X11(type = \"cairo\"). With XQuartz installed there are two fontconfig areas from different versions and it can help to set\nsetenv FONTCONFIG_PATH /opt/X11/lib/X11/fontconfig\nAnother symptom has been that italic/oblique fonts are replaced by upright ones."
  },
  {
    "objectID": "Installing-R-under-macOS.html#uninstalling-under-macos",
    "href": "Installing-R-under-macOS.html#uninstalling-under-macos",
    "title": "4  Installing R under macOS",
    "section": "4.2 Uninstalling under macOS",
    "text": "4.2 Uninstalling under macOS\nR for macOS consists of two parts: the GUI (R.APP) and the R framework. Un-installation is as simple as removing those folders (e.g. by dragging them onto the Bin aka Trash). The typical installation will install the GUI into the /Applications/R.app folder and the R framework into the /Library/Frameworks/R.framework folder. The links to R and Rscript in /usr/local/bin should also be removed.\nIf you want to get rid of R more completely using a Terminal, simply run:\nsudo rm -Rf /Library/Frameworks/R.framework /Applications/R.app \\\n   /usr/local/bin/R /usr/local/bin/Rscript\nThe installation consists of up to four Apple packages:4 for the Intel build, org.R-project.x86_64.R.fw.pkg, org.R-project.x86_64.R.GUI.pkg, org.r-project.x86_64.tcltk and org.r-project.x86_64.texinfo. You can use sudo pkgutil --forget if you want the Apple Installer to forget about the package without deleting its files (useful for the R framework when installing multiple R versions in parallel), or after you have deleted the files. NB: the package names are case-sensitive and the R domain is named inconsistently.4 At the time of writing: use pkgutil --pkgs | grep -i org.r-project to check.\nUninstalling the Tcl/Tk and Texinfo components (which are installed under /opt/R/x86_64 on a x86_64 build and /opt/R/arm64 for an arm64 one) is not as simple. You can list the files they installed in a Terminal by e.g.\npkgutil --files org.r-project.x86_64.tcltk\npkgutil --files org.r-project.x86_64.texinfo\n(For the ‘Apple Silicon’ build, replace x86_64 by arm64.) These are paths relative to /, the root of the file system.\nIf you are not compiling R nor installing packages from source you could remove all of /opt/R/x86_64 or /opt/R/arm64."
  },
  {
    "objectID": "Installing-R-under-macOS.html#multiple-versions",
    "href": "Installing-R-under-macOS.html#multiple-versions",
    "title": "4  Installing R under macOS",
    "section": "4.3 Multiple versions",
    "text": "4.3 Multiple versions\nThe installer will remove any previous version5 of the R framework which it finds installed. This can be avoided by using pkgutil --forget (see the previous section). However, note that different versions are installed under /Library/Frameworks/R.framework/Versions as 4.4 (or 4.4-arm64), 4.3 and so on, so it is not possible to have different 4.x.y versions installed for the same x and CPU type.5 More precisely, of the Apple package of the same name: this means that Intel and ARM versions can be installed together.\nR.APP will always run the ‘current’ version, that is the last installed version.\nFootnotes"
  },
  {
    "objectID": "Running-R.html",
    "href": "Running-R.html",
    "title": "5  Running R",
    "section": "",
    "text": "How to start R and what command-line options are available is discussed in section ‘Invoking R’ in the ‘An Introduction to R’ manual.\nYou should ensure that the shell has set adequate resource limits: R expects a stack size of at least 8MB and to be able to open at least 256 file descriptors. (Any modern OS should have default limits at least as large as these, but apparently NetBSD may not. Use the shell command ulimit (sh/bash) or limit (csh/tcsh) to check.) For some compilers1 and packages a larger stack size has been needed: 20-25MB has sufficed to date.1 Including GCC 9 on Linux.\nR makes use of a number of environment variables, the default values of many of which are set in file R_HOME/etc/Renviron (there are none set by default on Windows and hence no such file). These are set at configure time, and you would not normally want to change them – a possible exception is R_PAPERSIZE (see Setting paper size). The paper size will be deduced from the LC_PAPER locale category if it exists and R_PAPERSIZE is unset, and this will normally produce the right choice from a4 and letter on modern Unix-alikes (but can always be overridden by setting R_PAPERSIZE).\nVarious environment variables can be set to determine where R creates its per-session temporary directory. The environment variables TMPDIR, TMP and TEMP are searched in turn and the first one which is set and points to a writable area is used. If none do, the final default is /tmp on Unix-alikes and the value of R_USER on Windows. The path should be an absolute path not containing spaces2 (and it is best to avoid non-alphanumeric characters such as + or quotes).2 On Windows a path containing spaces will be replaced by the ‘short path’ version if that does not contain spaces.\nSome Unix-alike systems are set up to remove files and directories periodically from /tmp, for example by a cron job running tmpwatch. Set TMPDIR to another directory before starting long-running jobs on such a system.\nNote that TMPDIR will be used to execute configure scripts when installing packages, so if /tmp has been mounted as noexec, TMPDIR needs to be set to a directory from which execution is allowed.\nFootnotes"
  },
  {
    "objectID": "Add-on-packages.html#default-packages",
    "href": "Add-on-packages.html#default-packages",
    "title": "6  Add-on packages",
    "section": "6.1 Default packages",
    "text": "6.1 Default packages\nThe set of packages loaded on startup is by default\n&gt; getOption(\"defaultPackages\")\n[1] \"datasets\"  \"utils\"     \"grDevices\" \"graphics\"  \"stats\"     \"methods\"\n(plus, of course, base) and this can be changed by setting the option in startup code (e.g. in ~/.Rprofile). It is initially set to the value of the environment variable R_DEFAULT_PACKAGES if set (as a comma-separated list). Setting R_DEFAULT_PACKAGES=NULL ensures that only package base is loaded.\nChanging the set of default packages is normally used to reduce the set for speed when scripting: in particular not using methods will reduce the start-up time by a factor of up to two. But it can also be used to customize R, e.g. for class use. Rscript also checks the environment variable R_SCRIPT_DEFAULT_PACKAGES; if set, this takes precedence over R_DEFAULT_PACKAGES."
  },
  {
    "objectID": "Add-on-packages.html#managing-libraries",
    "href": "Add-on-packages.html#managing-libraries",
    "title": "6  Add-on packages",
    "section": "6.2 Managing libraries",
    "text": "6.2 Managing libraries\nR packages are installed into libraries, which are directories in the file system containing a subdirectory for each package installed there.\nR comes with a single library, R_HOME/library which is the value of the R object .Library containing the standard and recommended1 packages. Both sites and users can create others and make use of them (or not) in an R session. At the lowest level .libPaths() can be used to add paths to the collection of libraries or to report the current collection.1 unless they were excluded in the build.\nR will automatically make use of a site-specific library R_HOME/site-library if this exists (it does not in a vanilla R installation). This location can be overridden by setting2 .Library.site in R_HOME/etc/Rprofile.site, or (not recommended) by setting the environment variable R_LIBS_SITE.2 its binding is locked once the startup files have been read, so users cannot easily change it. See ?.libPaths for how to make use of the new value.\nUsers can have one or more libraries, normally specified by the environment variable R_LIBS_USER. This has a default value (to see it, use Sys.getenv(\"R_LIBS_USER\") within an R session), but that is only used if the corresponding directory actually exists (which by default it will not).\nBoth R_LIBS_USER and R_LIBS_SITE can specify multiple library paths, separated by colons (semicolons on Windows)."
  },
  {
    "objectID": "Add-on-packages.html#installing-packages",
    "href": "Add-on-packages.html#installing-packages",
    "title": "6  Add-on packages",
    "section": "6.3 Installing packages",
    "text": "6.3 Installing packages\nPackages may be distributed in source form or compiled binary form. Installing source packages which contain C/C++/Fortran code requires that compilers and related tools be installed. Binary packages are platform-specific and generally need no special tools to install, but see the documentation for your platform for details.\nNote that you may need to specify implicitly or explicitly the library to which the package is to be installed. This is only an issue if you have more than one library, of course.\nEnsure that the environment variable TMPDIR is either unset (and /tmp exists and can be written in and executed from) or is the absolute path to a valid temporary directory, not containing spaces.\nFor most users it suffices to call install.packages(pkgname) or its GUI equivalent if the intention is to install a CRAN package and internet access is available.3 On most systems install.packages() will allow packages to be selected from a list box (typically with thousands of items).3 If a proxy needs to be set, see ?download.file.\nTo install packages from source on a Unix-alike use in a terminal\nR CMD INSTALL -l /path/to/library pkg1 pkg2 ...\nThe part -l /path/to/library can be omitted, in which case the first library of a normal R session is used (that shown by .libPaths()[1]).\nThere are a number of options available: use R CMD INSTALL --help to see the current list.\nAlternatively, packages can be downloaded and installed from within R. First choose your nearest CRAN mirror using chooseCRANmirror(). Then download and install packages pkg1 and pkg2 by\n&gt; install.packages(c(\"pkg1\", \"pkg2\"))\nThe essential dependencies of the specified packages will also be fetched. Unless the library is specified (argument lib) the first library in the library search path is used: if this is not writable, R will ask the user (in an interactive session) if the default personal library should be created, and if allowed to will install the packages there.\nIf you want to fetch a package and all those it depends on (in any way) that are not already installed, use e.g.\n&gt; install.packages(\"Rcmdr\", dependencies = TRUE)\ninstall.packages can install a source package from a local .tar.gz file (or a URL to such a file) by setting argument repos to NULL: this will be selected automatically if the name given is a single .tar.gz file.\ninstall.packages can look in several repositories, specified as a character vector by the argument repos: these can include a CRAN mirror, Bioconductor, R-forge, rforge.net, local archives, local files, …). Function setRepositories() can select amongst those repositories that the R installation is aware of.\nSomething which sometimes puzzles users is that install.packages() may report that a package which they believe should be available is not found. Some possible reasons:\n\nThe package, such as grid or tcltk, is part of R itself and not otherwise available.\nThe package is not in the available repositories, so check which have been selected by\ngetOption(\"repos\")\nThe package is available, but not for the current version of R or for the type of OS (Unix/Windows). To retrieve the information on available versions of package pkg, use\nav &lt;- available.packages(filters=list())\nav[av[, \"Package\"] == pkg, ]\nin your R session, and look at the Depends and OS_type fields (there may be more than one matching entry). If the package depends on a version of R later than the one in use, it is possible that an earlier version is available which will work with your version of R: for CRAN look for ‘Old sources’ on the package’s CRAN landing page and manually retrieve an appropriate version (of comparable age to your version of R).\n\nNaive users sometimes forget that as well as installing a package, they have to use library to make its functionality available.\n\n6.3.1 Windows\nWhat install.packages does by default is different on Unix-alikes (except macOS) and Windows. On Unix-alikes it consults the list of available source packages on CRAN (or other repository/ies), downloads the latest version of the package sources, and installs them (via R CMD INSTALL). On Windows it looks (by default) first at the list of binary versions of packages available for your version of R and downloads the latest versions (if any). If no binary version is available or the source version is newer, it will install the source versions of packages without compiled C/C++/Fortran code, and offer to do so for those with, if make is available (and this can be tuned by option \"install.packages.compile.from.source\").\nOn Windows install.packages can also install a binary package from a local zip file (or the URL of such a file) by setting argument repos to NULL. Rgui.exe has a menu Packages with a GUI interface to install.packages, update.packages and library.\nWindows binary packages for R are distributed as a single binary containing either or both architectures (32- and 64-bit). From R 4.2.0, they always contain only the 64-bit architecture.\nR CMD INSTALL works in Windows to install source packages. No additional tools are needed if the package does not contain compiled code, and install.packages(type=\"source\") will work for such packages. Those with compiled code need the tools (see The Windows toolset). The tools are found automatically by R when installed by the toolset installer. See Building R and packages for more details.\nOccasional permission problems after unpacking source packages have been seen on some systems: these have been circumvented by setting the environment variable R_INSTALL_TAR to tar.exe.\nIf you have only a source package that is known to work with current R and just want a binary Windows build of it, you could make use of the building service offered at https://win-builder.r-project.org/.\nFor almost all packages R CMD INSTALL will attempt to install both 32- and 64-bit builds of a package if run from a 32/64-bit install of R (only 64-bit builds and installs are supported since R 4.2.0). It will report success if the installation of the architecture of the running R succeeded, whether or not the other architecture was successfully installed. The exceptions are packages with a non-empty configure.win script or which make use of src/Makefile.win. If configure.win does something appropriate to both architectures use4 option --force-biarch: otherwise R CMD INSTALL --merge-multiarch can be applied to a source tarball to merge separate 32- and 64-bit installs. (This can only be applied to a tarball, and will only succeed if both installs succeed.)4 for a small number of CRAN packages where this is known to be safe and is needed by the autobuilder this is the default. Look at the source of tools:::.install_packages for the list. It can also be specified in the package’s DESCRIPTION file.\nIf you have a package without compiled code and no Windows-specific help, you can zip up an installation on another OS and install from that zip file on Windows. However, such a package can be installed from the sources on Windows without any additional tools.\n\n\n6.3.2 macOS\nOn macOS install.packages works as it does on other Unix-alike systems, but there is an additional type mac.binary (available for the CRAN distribution but not when compiling R from source) which can be passed to install.packages in order to download and install binary packages from a suitable repository. These binary package files for macOS have the extension .tgz. The R.APP GUI provides menus for installation of either binary or source packages, from CRAN, other repositories or local files.\nOn R builds using binary packages, the default is type both: this looks first at the list of binary packages available for your version of R and installs the latest versions (if any). If no binary version is available or the source version is newer, it will install the source versions of packages without compiled C/C++/Fortran code and offer to do so for those with, if make is available.\nNote that most binary packages which include compiled code are tied to a particular series (e.g. R 4.4.x or 4.3.x) of R.\nInstalling source packages which do not contain compiled code should work with no additional tools. For others you will need the ‘Command Line Tools’ for Xcode and compilers which match those used to build R, plus a Fortran compiler for packages which contain Fortran code: see macOS.\nPackage rJava and those which depend on it need a Java runtime installed and several packages need X11 installed, including those using Tk. See macOS and Java. Package rjags needs a build of JAGS installed under /usr/local, such as those at https://sourceforge.net/projects/mcmc-jags/files/JAGS/4.x/Mac%20OS%20X/.\nTcl/Tk extension BWidget used to be distributed with R but no longer is; Tktable has been distributed with most versions of R (but not 4.0.0 and not arm64 builds of 4.1.0 or 4.1.1).\nThe default compilers specified are shown in file /Library/Frameworks/R.framework/Resources/etc/Makeconf. At the time of writing those settings assumed that the C, Fortran and C++ compilers were on the path (see macOS). The settings can be changed, either by editing that file or in a file such as ~/.R/Makevars (see the next section). Entries which may need to be changed include CC, CXX, FC, FLIBS and the corresponding flags, and perhaps CXXCPP, DYLIB_LD, MAIN_LD, SHLIB_CXXLD and SHLIB_LD, as well as their CXX11, CXX14, CXX17 and CXX20 variants.\nSo for example you could select a specific LLVM clang for both C and C++ with extensive checking by having in ~/.R/Makevars\nCC = /usr/local/clang/bin/clang -isysroot\n  /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk\nCXX = /usr/local/clang/bin/clang++ -isysroot\n  /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk\nCXX11 = $CXX\nCXX14 = $CXX\nCXX17 = $CXX\nCXX20 = $CXX\nCFLAGS = -g -O2 -Wall -pedantic -Wconversion -Wno-sign-conversion\nCXXFLAGS = -g -O2 -Wall -pedantic -Wconversion -Wno-sign-conversion\nCXX11FLAGS = $CXXFLAGS\nCXX14FLAGS = $CXXFLAGS\nCXX17FLAGS = $CXXFLAGS\nCXX20FLAGS = $CXXFLAGS\n(long lines split for the manual only) and for the current macOS distribution of gfortran at https://mac.r-project.org/tools/\nFC = /opt/gfortran/bin/gfortran\n(arm64)\nFLIBS =  -L/opt/gfortran/lib/gcc/aarch64-apple-darwin20.0/12.2.0\n  -L/opt/gfortran/lib -lgfortran -lemutls_w -lquadmath\n(Intel)\nFLIBS =  -L/opt/gfortran/lib/gcc/x86_64-apple-darwin20.0/12.2.0\n  -L/opt/gfortran/lib -lgfortran -lquadmath\n(line broken here for the manual only).\nIf that clang build supports OpenMP, you can add\nSHLIB_OPENMP_CFLAGS = -fopenmp\nSHLIB_OPENMP_CXXFLAGS = -fopenmp\nto compile OpenMP-using packages. It will also be necessary to arrange for the libomp.dylib library to be found at both install time and run time, for example by copying/linking it somewhere that is searched such as /usr/local/lib.\nApple includes many Open Source libraries in macOS but increasingly without the corresponding headers (not even in Xcode nor the Command Line Tools): they are often rather old versions. If installing packages from source using them it is usually easiest to install a statically-linked up-to-date copy of the Open Source package from its sources or from https://mac.r-project.org/bin/. But sometimes it is desirable/necessary to use Apple’s dynamically linked library, in which case appropriate headers could be extracted from the sources5 available via https://opensource.apple.com – this has been used for iodbc.5 Note that capitalization and versioning may differ from the Open Source project.\nSome care may be needed with selecting compilers when installing external software for use with packages. The ‘system’ compilers as used when building R are clang and clang++, but the Apple toolchain also provides compilers called gcc and g++ which despite their names are based on LLVM and libc++ like the system ones and which behave in almost the same way as the system ones. Most Open Source software has a configure script developed using GNU autoconf and hence will select gcc and g++ as the default compilers: this usually works fine. For consistency one can use\n./configure CC=clang CFLAGS=-O2 CXX=clang++ CXXFLAGS=-O2\n(avoiding autoconfs default -g). As from R 4.3.0, R CMD INSTALL and install.packages() try to invoke configure with the same compilers and flags used to build R.\nFor arm64, not all configure scripts have been updated to recognize the platform and so might need the flag --build=aarch64-apple-darwin20.1.0. Also, be aware that running the compilers from a x86_64 application switches them to generating code for that CPU: this applies to a Terminal, a shell, older cmake or (non-system) make, and from R CMD INSTALL or install.packages(). One can use\n./configure CC=\"clang -arch arm64\" CFLAGS=-O2 CXX=\"clang++ -arch arm64\" CXXFLAGS=-O2\nto force arm64 code.\n\n\n6.3.3 Customizing package compilation\nThe R system and package-specific compilation flags can be overridden or added to by setting the appropriate Make variables in the personal file HOME/.R/Makevars-R_PLATFORM (but HOME/.R/Makevars.win or HOME/.R/Makevars.win64 on Windows), or if that does not exist, HOME/.R/Makevars, where R_PLATFORM is the platform for which R was built, as available in the platform component of the R variable R.version. The full path to an alternative personal file6 can be specified via the environment variable R_MAKEVARS_USER.6 using a path containing spaces is likely to cause problems\nPackage developers are encouraged to use this mechanism to enable a reasonable amount of diagnostic messaging (“warnings”) when compiling, such as e.g. -Wall -pedantic for tools from GCC, the GNU Compiler Collection, or for clang.\nNote that this mechanism can also be used when it is necessary to change the optimization level whilst installing a particular package. For example\n## for C code\nCFLAGS = -g -O -mtune=native\n## for C++ code\nCXXFLAGS = -g -O -mtune=native\n## for C++11 code\nCXX11FLAGS = -g -O -mtune=native\n## for fixed-form Fortran code\nFFLAGS = -g -O -mtune=native\n## for C17 code\nC17FLAGS = -g -O -mtune=native -Wno-strict-prototypes\nNote that if you have specified a non-default C++ or C standard, you need to set the flag(s) appropriate to that standard.\nAnother use is to override the settings in a binary installation of R. For example, for the current distribution of gfortran at https://mac.r-project.org/tools/\nFC = /opt/gfortran/bin/gfortran\n(arm64)\nFLIBS =  -L/opt/gfortran/lib/gcc/aarch64-apple-darwin20.0/12.2.0\n  -L/opt/gfortran/lib -lgfortran -lemutls_w -lquadmath\n(Intel)\nFLIBS =  -L/opt/gfortran/lib/gcc/x86_64-apple-darwin20.0/12.2.0\n  -L/opt/gfortran/lib -lgfortran -lquadmath\n(line broken here for the manual only).\nThere is also provision for a site-wide Makevars.site file under R_HOME/etc (in a sub-architecture-specific directory if appropriate). This is read immediately after Makeconf, and the path to an alternative file can be specified by environment variable R_MAKEVARS_SITE.\nNote that these mechanisms do not work with packages which fail to pass settings down to sub-makes, perhaps reading etc/Makeconf in makefiles in subdirectories. Fortunately such packages are unusual.\n\n\n6.3.4 Multiple sub-architectures\nWhen installing packages from their sources, there are some extra considerations on installations which use sub-architectures. These are commonly used on Windows but can in principle be used on other platforms.\nWhen a source package is installed by a build of R which supports multiple sub-architectures, the normal installation process installs the packages for all sub-architectures. The exceptions are\n\nUnix-alikes\n\nwhere there is an configure script, or a file src/Makefile.\n\nWindows\n\nwhere there is a non-empty configure.win script, or a file src/Makefile.win (with some exceptions where the package is known to have an architecture-independent configure.win, or if --force-biarch or field Biarch in the DESCRIPTION file is used to assert so).\n\n\nIn those cases only the current architecture is installed. Further sub-architectures can be installed by\nR CMD INSTALL --libs-only pkg\nusing the path to R or R --arch to select the additional sub-architecture. There is also R CMD INSTALL --merge-multiarch to build and merge the two architectures, starting with a source tarball.\n\n\n6.3.5 Byte-compilation\nAs from R 3.6.0, all packages are by default byte-compiled.\nByte-compilation can be controlled on a per-package basis by the ByteCompile field in the DESCRIPTION file.\n\n\n6.3.6 External software\nSome R packages contain compiled code which links to external software libraries. Unless the external library is statically linked (which is done as much as possible for binary packages on Windows and macOS), the libraries have to be found when the package is loaded and not just when it is installed. How this should be done depends on the OS (and in some cases the version).\nFor Unix-alikes except macOS the primary mechanism is the ld.so cache controlled by ldconfig: external dynamic libraries recorded in that cache will be found. Standard library locations will be covered by the cache, and well-designed software will add its locations (as for example openmpi does on Fedora). The secondary mechanism is to consult the environment variable LD_LIBRARY_PATH. The R script controls that variable, and sets it to the concatenation of R_LD_LIBRARY_PATH, R_JAVA_LD_LIBRARY_PATH and the environment value of LD_LIBRARY_PATH. The first two have defaults which are normally set when R is installed (but can be overridden in the environment) so LD_LIBRARY_PATH is the best choice for a user to set.\nOn macOS the primary mechanism is to embed the absolute path to dependent dynamic libraries into an object when it is compiled. Few R packages arrange to do so, but it can be edited7 via install_name_tool — that only deals with direct dependencies and those would also need to be compiled to include the absolute paths of their dependencies. If the choice of absolute path is to be deferred to load time, how they are resolved is described in man dyld: the role of LD_LIBRARY_PATH is replaced on macOS by DYLD_LIBRARY_PATH and DYLD_FALLBACK_LIBRARY_PATH. Running R CMD otool -L on the package shared object will show where (if anywhere) its dependencies are resolved. DYLD_FALLBACK_LIBRARY_PATH is preferred (and it is that which is manipulated by the R script), but as from 10.11 (‘El Capitan’) the default behaviour had been changed for security reasons to discard these environment variables when invoking a shell script (and R is a shell script). That makes the only portable option to set R_LD_LIBRARY_PATH in the environment, something like7 They need to have been created using -headerpad_max_install_names, which is the default for an R package.\nexport R_LD_LIBRARY_PATH=\"`R RHOME`/lib:/opt/local/lib\"\nThe precise rules for where Windows looks for DLLs are complex and depend on the version of Windows. But for present purposes the main solution is to put the directories containing the DLLs the package links to (and any those DLLs link to) on the PATH.\nThe danger with any of the methods which involve setting environment variables is of inadvertently masking a system library. This is less for DYLD_FALLBACK_LIBRARY_PATH and for appending to PATH on Windows (as it should already contain the system library paths)."
  },
  {
    "objectID": "Add-on-packages.html#updating-packages",
    "href": "Add-on-packages.html#updating-packages",
    "title": "6  Add-on packages",
    "section": "6.4 Updating packages",
    "text": "6.4 Updating packages\nThe command update.packages() is the simplest way to ensure that all the packages on your system are up to date. It downloads the list of available packages and their current versions, compares it with those installed and offers to fetch and install any that have later versions on the repositories.\nAn alternative interface to keeping packages up-to-date is provided by the command packageStatus(), which returns an object with information on all installed packages and packages available at multiple repositories. The print and summary methods give an overview of installed and available packages, the upgrade method offers to fetch and install the latest versions of outdated packages.\nOne sometimes-useful additional piece of information that packageStatus() returns is the status of a package, as \"ok\", \"upgrade\" or \"unavailable\" (in the currently selected repositories). For example\n&gt; inst &lt;- packageStatus()$inst\n&gt; inst[inst$Status != \"ok\", c(\"Package\", \"Version\", \"Status\")]\n                  Package Version      Status\nBiobase           Biobase   2.8.0 unavailable\nRCurl               RCurl   1.4-2     upgrade\nRgraphviz       Rgraphviz  1.26.0 unavailable\nrgdal               rgdal  0.6-27     upgrade"
  },
  {
    "objectID": "Add-on-packages.html#removing-packages",
    "href": "Add-on-packages.html#removing-packages",
    "title": "6  Add-on packages",
    "section": "6.5 Removing packages",
    "text": "6.5 Removing packages\nPackages can be removed in a number of ways. From a command prompt they can be removed by\nR CMD REMOVE -l /path/to/library pkg1 pkg2 ...\nFrom a running R process they can be removed by\n&gt; remove.packages(c(\"pkg1\", \"pkg2\"),\n                  lib = file.path(\"path\", \"to\", \"library\"))\nFinally, one can just remove the package directory from the library."
  },
  {
    "objectID": "Add-on-packages.html#setting-up-a-package-repository",
    "href": "Add-on-packages.html#setting-up-a-package-repository",
    "title": "6  Add-on packages",
    "section": "6.6 Setting up a package repository",
    "text": "6.6 Setting up a package repository\nUtilities such as install.packages can be pointed at any CRAN-style repository, and R users may want to set up their own. The ‘base’ of a repository is a URL such as https://www.stats.ox.ac.uk/pub/RWin/: this must be an URL scheme that download.packages supports (which also includes https://, ftp:// and file://). Under that base URL there should be directory trees for one or more of the following types of package distributions:\n\n\"source\": located at src/contrib and containing .tar.gz files. Other forms of compression can be used, e.g. .tar.bz2 or .tar.xz files. Complete repositories contain the sources corresponding to any binary packages, and in any case it is wise to have a src/contrib area with a possibly empty PACKAGES file.\n\"win.binary\": located at bin/windows/contrib/x.y for R versions x.y.z and containing .zip files for Windows.\n\"mac.binary\": located at bin/macosx/contrib/4.y for the CRAN builds for macOS for R versions 4.y.z, containing .tgz files.\n\"mac.binary.el-capitan\": located at bin/macosx/el-capitan/contrib/3.y for the CRAN builds for R versions 3.y.z, containing .tgz files.\n\nEach terminal directory must also contain a PACKAGES file. This can be a concatenation of the DESCRIPTION files of the packages separated by blank lines, but only a few of the fields are needed. The simplest way to set up such a file is to use function write_PACKAGES in the tools package, and its help explains which fields are needed. Optionally there can also be PACKAGES.rds and PACKAGES.gz files, downloaded in preference to PACKAGES. (If you have a mis-configured server that does not report correctly non-existent files you may need these files.)\nTo add your repository to the list offered by setRepositories(), see the help file for that function.\nIncomplete repositories are better specified via a contriburl argument than via being set as a repository.\nA repository can contain subdirectories, when the descriptions in the PACKAGES file of packages in subdirectories must include a line of the form\nPath: path/to/subdirectory\n—once again write_PACKAGES is the simplest way to set this up."
  },
  {
    "objectID": "Add-on-packages.html#checking-installed-source-packages",
    "href": "Add-on-packages.html#checking-installed-source-packages",
    "title": "6  Add-on packages",
    "section": "6.7 Checking installed source packages",
    "text": "6.7 Checking installed source packages\nIt can be convenient to run R CMD check on an installed package, particularly on a platform which uses sub-architectures. The outline of how to do this is, with the source package in directory pkg (or a tarball filename):\nR CMD INSTALL -l libdir pkg &gt; pkg.log 2&gt;&1\nR CMD check -l libdir --install=check:pkg.log pkg\nWhere sub-architectures are in use the R CMD check line can be repeated with additional architectures by\nR --arch arch CMD check -l libdir --extra-arch --install=check:pkg.log pkg\nwhere --extra-arch selects only those checks which depend on the installed code and not those which analyse the sources. (If multiple sub-architectures fail only because they need different settings, e.g. environment variables, --no-multiarch may need to be added to the INSTALL lines.) On Unix-alikes the architecture to run is selected by --arch: this can also be used on Windows with R_HOME/bin/R.exe, but it is more usual to select the path to the Rcmd.exe of the desired architecture.\nSo on Windows to install, check and package for distribution a source package from a tarball which has been tested on another platform one might use\n.../bin/x64/Rcmd INSTALL -l libdir tarball --build &gt; pkg.log 2&gt;&1\nFootnotes"
  },
  {
    "objectID": "Internationalization.html#locales",
    "href": "Internationalization.html#locales",
    "title": "7  Internationalization and Localization",
    "section": "7.1 Locales",
    "text": "7.1 Locales\nA locale is a description of the local environment of the user, including the preferred language, the encoding of characters, the currency used and its conventions, and so on. Aspects of the locale are accessed by the R functions Sys.getlocale and Sys.localeconv.\nThe system of naming locales is OS-specific. There is quite wide agreement on schemes, but not on the details of their implementation. A locale needs to specify\n\nA human language. These are generally specified by a lower-case two-character abbreviation following ISO 639 (see e.g. https://en.wikipedia.org/wiki/ISO_639-1).\nA ‘territory’, used mainly to specify the currency. These are generally specified by an upper-case two-character abbreviation following ISO 3166 (see e.g. https://en.wikipedia.org/wiki/ISO_3166).\nA charset encoding, which determines both how a byte stream should be divided into characters, and which characters the subsequences of bytes represent. Sometimes the combination of language and territory is used to specify the encoding, for example to distinguish between traditional and simplified Chinese.\nOptionally, a modifier, for example to indicate that Austria is to be considered pre- or post-Euro. The modifier is also used to indicate the script (@latin, @cyrillic for Serbian, @iqtelif) or language dialect (e.g. @saaho, a dialect of Afar, and @bokmal and @nynorsk, dialects of Norwegian regarded by some OSes as separate languages, no and nn).\n\nR is principally concerned with the first (for translations) and third. Note that the charset may be deducible from the language, as some OSes offer only one charset per language.\n\n7.1.1 Locales under Unix-alikes\nModern Linux uses the XPG1 locale specifications which have the form en_GB, en_GB.UTF-8, aa_ER.UTF-8@saaho, de_AT.iso885915@euro, the components being in the order listed above. (See man locale and locale -a for more details.) Similar schemes are used by most Unix-alikes: some (including some distributions of Linux) use .utf8 rather than .UTF-8.1 ‘X/Open Portability Guide’, which has had several versions.\nNote that whereas UTF-8 locales are nowadays almost universally used, locales such as en_GB use 8-bit encodings for backwards compatibility.\n\n\n7.1.2 Locales under Windows\nWindows also uses locales, but specified in a rather less concise way. Most users will encounter locales only via drop-down menus, but more information and lists can be found by searching for Windows language country strings).\nIt offers only one encoding per language.\nSome care is needed with Windows’ locale names. For example, chinese is Traditional Chinese and not Simplified Chinese as used in most of the Chinese-speaking world.\n\n\n7.1.3 Locales under macOS\nmacOS supports locales in its own particular way, but the R GUI tries to make this easier for users. See https://developer.apple.com/library/archive/documentation/MacOSX/Conceptual/BPInternational/ for how users can set their locales. As with Windows, end users will generally only see lists of languages/territories. Users of R in a terminal may need to set the locale to something like en_GB.UTF-8 if it defaults to C (as it sometimes does when logging in remotely and for batch jobs: note whether Terminal sets the LANG environment variable is an (advanced) preference, but does so by default).\nInternally macOS uses a form similar to Linux: the main difference from other Unix-alikes is that where a character set is not specified it is assumed to be UTF-8."
  },
  {
    "objectID": "Internationalization.html#localization-of-messages",
    "href": "Internationalization.html#localization-of-messages",
    "title": "7  Internationalization and Localization",
    "section": "7.2 Localization of messages",
    "text": "7.2 Localization of messages\nThe preferred language for messages is by default taken from the locale. This can be overridden first by the setting of the environment variable LANGUAGE and then2 by the environment variables LC_ALL, LC_MESSAGES and LANG. (The last three are normally used to set the locale and so should not be needed, but the first is only used to select the language for messages.) The code tries hard to map locales to languages, but on some systems (notably Windows) the locale names needed for the environment variable LC_ALL do not all correspond to XPG language names and so LANGUAGE may need to be set. (One example is LC_ALL=es on Windows which sets the locale to Estonian and the language to Spanish.)2 On some systems setting LC_ALL or LC_MESSAGES to C disables LANGUAGE.\nIt is usually possible to change the language once R is running via (not Windows) Sys.setlocale(\"LC_MESSAGES\", \"new_locale\"), or by setting an environment variable such as LANGUAGE, provided3 the language you are changing to can be output in the current character set. But this is OS-specific, and has been known to stop working on an OS upgrade. Note that translated messages may be cached, so attempting to change the language of an error that has already been output in another language may not work.3 If you try changing from French to Russian except in a UTF-8 locale, you may find messages change to English.\nMessages are divided into domains, and translations may be available for some or all messages in a domain. R makes use of the following domains.\n\nDomain R for the C-level error and warning messages from the R interpreter.\nDomain R-pkg for the R stop, warning and message messages in each package, including R-base for the base package.\nDomain pkg for the C-level messages in each package.\nDomain RGui for the menus etc of the R for Windows GUI front-end.\n\nDividing up the messages in this way allows R to be extensible: as packages are loaded, their message translation catalogues can be loaded too.\nR can be built without support for translations, but it is enabled by default.\nR-level and C-level domains are subtly different, for example in the way strings are canonicalized before being passed for translation.\nTranslations are looked for by domain according to the currently specified language, as specifically as possible, so for example an Austrian (de_AT) translation catalogue will be used in preference to a generic German one (de) for an Austrian user. However, if a specific translation catalogue exists but does not contain a translation, the less specific catalogues are consulted. For example, R has catalogues for en_GB that translate the Americanisms (e.g., gray) in the standard messages into English.4 Two other examples: there are catalogues for es, which is Spanish as written in Spain and these will by default also be used in Spanish-speaking Latin American countries, and also for pt_BR, which are used for Brazilian locales but not for locales specifying Portugal.4 the language written in England: some people living in the USA appropriate this name for their language.\nTranslations in the right language but the wrong charset are made use of by on-the-fly re-encoding. The LANGUAGE variable (only) can be a colon-separated list, for example se:de, giving a set of languages in decreasing order of preference. One special value is en@quot, which can be used in a UTF-8 locale to have American error messages with pairs of single quotes translated to Unicode directional quotes.\nIf no suitable translation catalogue is found or a particular message is not translated in any suitable catalogue, ‘English’5 is used.5 with Americanisms.\nSee https://developer.r-project.org/Translations30.html for how to prepare and install translation catalogues.\nFootnotes"
  },
  {
    "objectID": "Choosing-between-32--and-64-bit-builds.html",
    "href": "Choosing-between-32--and-64-bit-builds.html",
    "title": "8  Choosing between 32- and 64-bit builds",
    "section": "",
    "text": "As from R 4.4.0 32-bit builds are unsupported."
  },
  {
    "objectID": "The-standalone-Rmath-library.html#unix-alikes",
    "href": "The-standalone-Rmath-library.html#unix-alikes",
    "title": "9  The standalone Rmath library",
    "section": "9.1 Unix-alikes",
    "text": "9.1 Unix-alikes\nIf R has not already been made in the directory tree, configure must be run as described in the main build instructions.\nThen (in src/nmath/standalone)\nmake\nwill make standalone libraries libRmath.a and libRmath.so (libRmath.dylib on macOS): make static and make shared will create just one of them.\nTo use the routines in your own C or C++ programs, include\n#define MATHLIB_STANDALONE\n#include &lt;Rmath.h&gt;\nand link against -lRmath (and -lm if needed on your OS). The example file test.c does nothing useful, but is provided to test the process (via make test). Note that you will probably not be able to run it unless you add the directory containing libRmath.so to the LD_LIBRARY_PATH environment variable (libRmath.dylib, DYLD_FALLBACK_LIBRARY_PATH on macOS).\nThe targets\nmake install\nmake uninstall\nwill (un)install the header Rmath.h and shared and static libraries (if built). Both prefix= and DESTDIR are supported, together with more precise control as described for the main build.\nmake install installs a file for pkg-config to use by e.g.\n$(CC) `pkg-config --cflags libRmath` -c test.c\n$(CC) `pkg-config --libs libRmath` test.o -o test\nOn some systems make install-strip will install a stripped shared library."
  },
  {
    "objectID": "The-standalone-Rmath-library.html#windows",
    "href": "The-standalone-Rmath-library.html#windows",
    "title": "9  The standalone Rmath library",
    "section": "9.2 Windows",
    "text": "9.2 Windows\nYou need to set up2 almost all the tools to make R and then run (in a Unix-like shell)2 including copying MkRules.dist to MkRule.local and selecting the architecture.\n(cd ../../gnuwin32; make MkRules)\n(cd ../../include; make -f Makefile.win config.h Rconfig.h Rmath.h)\nmake -f Makefile.win\nAlternatively, in a cmd.exe shell use\ncd ../../include\nmake -f Makefile.win config.h Rconfig.h Rmath.h\ncd ../nmath/standalone\nmake -f Makefile.win\nThis creates a static library libRmath.a and a DLL Rmath.dll. If you want an import library libRmath.dll.a (you don’t need one), use\nmake -f Makefile.win shared implib\nTo use the routines in your own C or C++ programs using MinGW-w64, include\n#define MATHLIB_STANDALONE\n#include &lt;Rmath.h&gt;\nand link against -lRmath. This will use the first found of libRmath.dll.a, libRmath.a and Rmath.dll in that order, so the result depends on which files are present. You should be able to force static or dynamic linking via\n-Wl,-Bstatic -lRmath -Wl,Bdynamic\n-Wl,-Bdynamic -lRmath\nor by linking to explicit files (as in the test target in Makefile.win: this makes two executables, test.exe which is dynamically linked, and test-static.exe, which is statically linked).\nIt is possible to link to Rmath.dll using other compilers, either directly or via an import library: if you make a MinGW-w64 import library as above, you will create a file Rmath.def which can be used (possibly after editing) to create an import library for other systems such as Visual C++.\nIf you make use of dynamic linking you should use\n#define MATHLIB_STANDALONE\n#define RMATH_DLL\n#include &lt;Rmath.h&gt;\nto ensure that the constants like NA_REAL are linked correctly. (Auto-import will probably work with MinGW-w64, but it is better to be sure. This is likely to also work with VC++, Borland and similar compilers.)\nFootnotes"
  },
  {
    "objectID": "Function-and-variable-index.html",
    "href": "Function-and-variable-index.html",
    "title": "Function and variable index",
    "section": "",
    "text": "Jump to:  \nC   I   M   R   U  \n\n\n\n\n\n\n\nIndex Entry\n \nSection\n\n\nC\n\n\n\n\n\n\nconfigure:\n \nSimple compilation\n\n\n\nconfigure:\n \nSimple compilation\n\n\n\nconfigure:\n \nInstallation\n\n\n\nconfigure:\n \nInstallation\n\n\n\nconfigure:\n \nConfiguration variables\n\n\n\nconfigure:\n \nUsing make\n\n\nI\n\n\n\n\n\n\ninstall.packages:\n \nInstalling packages\n\n\nM\n\n\n\n\n\n\nmake:\n \nUsing make\n\n\nR\n\n\n\n\n\n\nremove.packages:\n \nRemoving packages\n\n\n\nR_HOME:\n \nSimple compilation\n\n\nU\n\n\n\n\n\n\nupdate.packages:\n \nUpdating packages\n\n\n\n\n\n\nJump to:  \nC   I   M   R   U"
  },
  {
    "objectID": "Concept-index.html",
    "href": "Concept-index.html",
    "title": "Concept index",
    "section": "",
    "text": "Jump to:  \nB   C   F   I   L   M   O   P   R   S   U   V  \n\n\n\n\n\n\n\nIndex Entry\n \nSection\n\n\nB\n\n\n\n\n\n\nBLAS library:\n \nLinear algebra\n\n\n\nBLAS library:\n \nAccelereate\n\n\nC\n\n\n\n\n\n\nCairo:\n \nInstalling R under macOS\n\n\n\nCairo:\n \nUseful libraries and programs\n\n\n\nCairo:\n \nX11 issues\n\n\n\nCairo:\n \nCairo graphics\n\n\nF\n\n\n\n\n\n\nFortran:\n \nUsing Fortran\n\n\n\nFreeBSD:\n \nFreeBSD\n\n\nI\n\n\n\n\n\n\nInstallation:\n \nInstallation\n\n\n\nInstalling under Unix-alikes:\n \nInstalling R under Unix-alikes\n\n\n\nInstalling under Windows:\n \nInstalling R under Windows\n\n\n\nInternationalization:\n \nInternationalization\n\n\nL\n\n\n\n\n\n\nLAPACK library:\n \nLAPACK\n\n\n\nLAPACK library:\n \nAccelereate\n\n\n\nLibraries:\n \nAdd-on packages\n\n\n\nLibraries, managing:\n \nManaging libraries\n\n\n\nLibraries, site:\n \nManaging libraries\n\n\n\nLibraries, user:\n \nManaging libraries\n\n\n\nLinux:\n \nInstalling R under Unix-alikes\n\n\n\nLinux:\n \nLinux\n\n\n\nLocale:\n \nInternationalization\n\n\n\nLocale:\n \nLocales\n\n\n\nLocalization:\n \nInternationalization\n\n\nM\n\n\n\n\n\n\nmacOS:\n \nInstalling R under Unix-alikes\n\n\n\nmacOS:\n \nInstalling R under macOS\n\n\n\nmacOS:\n \nmacOS\n\n\n\nManuals:\n \nMaking the manuals\n\n\n\nManuals, installing:\n \nInstallation\n\n\nO\n\n\n\n\n\n\nObtaining R:\n \nObtaining R\n\n\n\nOpenBSD:\n \nOpenBSD\n\n\nP\n\n\n\n\n\n\nPackages:\n \nAdd-on packages\n\n\n\nPackages, default:\n \nDefault packages\n\n\n\nPackages, installing:\n \nInstalling packages\n\n\n\nPackages, removing:\n \nRemoving packages\n\n\n\nPackages, updating:\n \nUpdating packages\n\n\n\nPango:\n \nUseful libraries and programs\n\n\n\nPango:\n \nCairo graphics\n\n\nR\n\n\n\n\n\n\nRepositories:\n \nSetting up a package repository\n\n\nS\n\n\n\n\n\n\nSite libraries:\n \nManaging libraries\n\n\n\nSources for R:\n \nGetting and unpacking the sources\n\n\n\nSubversion:\n \nUsing Subversion and rsync\n\n\n\nSubversion:\n \nEssential programs and libraries\n\n\nU\n\n\n\n\n\n\nUser libraries:\n \nManaging libraries\n\n\nV\n\n\n\n\n\n\nVignettes:\n \nEssential programs and libraries\n\n\n\n\n\n\nJump to:  \nB   C   F   I   L   M   O   P   R   S   U   V"
  },
  {
    "objectID": "Environment-variable-index.html",
    "href": "Environment-variable-index.html",
    "title": "Environment variable index",
    "section": "",
    "text": "Jump to:  \nB   C   D   J   L   P   R   T  \n\n\n\n\n\n\n\nIndex Entry\n \nSection\n\n\nB\n\n\n\n\n\n\nBLAS_LIBS:\n \nBLAS\n\n\nC\n\n\n\n\n\n\nCONFIG_SITE:\n \nConfiguration variables\n\n\nD\n\n\n\n\n\n\nDESTDIR:\n \nInstallation\n\n\n\nDESTDIR:\n \nUnix-alike standalone\n\n\nJ\n\n\n\n\n\n\nJAVA_HOME:\n \nJava support\n\n\nL\n\n\n\n\n\n\nLANG:\n \nLocalization of messages\n\n\n\nLANGUAGE:\n \nLocalization of messages\n\n\n\nLANGUAGE:\n \nLocalization of messages\n\n\n\nLAPACK_LIBS:\n \nLAPACK\n\n\n\nLC_ALL:\n \nLocalization of messages\n\n\n\nLC_COLLATE:\n \nTesting a Unix-alike Installation\n\n\n\nLC_MESSAGES:\n \nLocalization of messages\n\n\n\nLD_LIBRARY_PATH:\n \nUnix-alike standalone\n\n\n\nLD_LIBRARY_PATH:\n \nUsing Fortran\n\n\n\nLD_LIBRARY_PATH:\n \nCompile and load flags\n\n\nP\n\n\n\n\n\n\nPAPERSIZE:\n \nSetting paper size\n\n\n\nPATH:\n \nEssential programs and libraries\n\n\n\nPATH:\n \nUsing Fortran\n\n\nR\n\n\n\n\n\n\nR_ARCH:\n \nSub-architectures\n\n\n\nR_ARCH:\n \nSub-architectures\n\n\n\nR_BROWSER:\n \nSetting the browsers\n\n\n\nR_DEFAULT_PACKAGES:\n \nDefault packages\n\n\n\nR_DISABLE_HTTPD:\n \nHelp options\n\n\n\nR_GSCMD:\n \nUseful libraries and programs\n\n\n\nR_INSTALL_TAR:\n \nWindows packages\n\n\n\nR_JAVA_LD_LIBRARY_PATH:\n \nJava support\n\n\n\nR_JAVA_LD_LIBRARY_PATH:\n \nJava support\n\n\n\nR_LIBS:\n \nAdd-on packages\n\n\n\nR_LIBS_SITE:\n \nManaging libraries\n\n\n\nR_LIBS_USER:\n \nManaging libraries\n\n\n\nR_PAPERSIZE:\n \nMaking the manuals\n\n\n\nR_PAPERSIZE:\n \nRunning R\n\n\n\nR_PAPERSIZE:\n \nSetting paper size\n\n\n\nR_PAPERSIZE:\n \nMaking manuals\n\n\n\nR_PDFVIEWER:\n \nSetting the browsers\n\n\n\nR_RD4PDF:\n \nMaking the manuals\n\n\n\nR_RD4PDF:\n \nMaking manuals\n\n\n\nR_SCRIPT_DEFAULT_PACKAGES:\n \nDefault packages\n\n\n\nR_USER:\n \nRunning R\n\n\nT\n\n\n\n\n\n\nTAR:\n \nEssential programs and libraries\n\n\n\nTAR_OPTIONS:\n \nGetting and unpacking the sources\n\n\n\nTEMP:\n \nRunning R\n\n\n\nTMP:\n \nRunning R\n\n\n\nTMPDIR:\n \nSimple compilation\n\n\n\nTMPDIR:\n \nRunning R\n\n\n\nTMPDIR:\n \nRunning R\n\n\n\nTMPDIR:\n \nInstalling packages\n\n\n\n\n\n\nJump to:  \nB   C   D   J   L   P   R   T"
  },
  {
    "objectID": "Essential-and-useful-other-programs-under-a-Unix-alike.html#essential-programs-and-libraries",
    "href": "Essential-and-useful-other-programs-under-a-Unix-alike.html#essential-programs-and-libraries",
    "title": "Appendix A — Essential and useful other programs under a Unix-alike",
    "section": "A.1 Essential programs and libraries",
    "text": "A.1 Essential programs and libraries\nYou need a means of compiling C and Fortran 90 (see Using Fortran). Your C compiler should be ISO/IEC 600591, POSIX 1003.1 and C99-compliant.2 R tries to choose suitable flags3 for the C compilers it knows about, but you may have to set CC or CFLAGS suitably. (Note that options essential to run the compiler even for linking, such as those to set the architecture, should be specified as part of CC rather than in CFLAGS.)1 also known as IEEE 7542 Note that C11 compilers need not be C99-compliant: R requires support for double complex and variable-length arrays which are optional in C11 but are mandatory in C99. C17 (also known as C18 as it was published in 2018) is a ‘bugfix release’ of C11, clarifying the standard. However, all known recent compilers in C11 or C17 mode are C99-compliant, and most default to C17.3 Examples are -std=gnu99, -std=c99 and -c99.\nUnless you do not want to view graphs on-screen (or use macOS) you need X11 installed, including its headers and client libraries. For recent Fedora/RedHat distributions it means (at least) RPMs libX11, libX11-devel, libXt and libXt-devel. On Debian/Ubuntu we recommend the meta-package xorg-dev. If you really do not want these you will need to explicitly configure R without X11, using --with-x=no.\nThe command-line editing (and command completion) depends on the GNU readline library (including its headers): version 6.0 or later is needed for all the features to be enabled. Otherwise you will need to configure with --with-readline=no (or equivalent).\nA suitably comprehensive iconv function is essential. The R usage requires iconv to be able to translate between \"latin1\" and \"UTF-8\", to recognize \"\" (as the current encoding) and \"ASCII\", and to translate to and from the Unicode wide-character formats \"UCS-[24][BL]E\" — this is true by default for glibc4 but not of most commercial Unixes. However, you can make use of GNU libiconv (as used on macOS: see https://www.gnu.org/software/libiconv/).4 However, it is possible to break the default behaviour of glibc by re-specifying the gconv modules to be loaded.\nThe OS needs to have enough support5 for wide-character types: this is checked at configuration. Some C99 functions6 are required and checked for at configuration. A small number of POSIX functions7 are essential, and others8 will be used if available.5 specifically, the C99 functionality of headers wchar.h and wctype.h, types wctans_t and mbstate_t and functions mbrtowc, mbstowcs, wcrtomb, wcscoll, wcstombs, wctrans, wctype, and iswctype.6 including expm1, hypot, log1p, nearbyint and va_copy.7 including opendir, readdir, closedir, popen, stat, glob, access, getcwd and chdir system calls, select on a Unix-alike, and either putenv or setenv.8 such as realpath, symlink.\nInstallations of zlib (version 1.2.5 or later), libbz2 (version 1.0.6 or later: called bzip2-libs/bzip2-devel or libbz2-1.0/libbz2-dev by some Linux distributions) and liblzma9 version 5.0.3 or later are required.9 most often distributed as part of xz: possible names in Linux distributions include xz-devel/xz-libs and liblzma-dev.\nEither PCRE1 (version 8.32 or later, formerly known as just PCRE) or PCRE2 is required: PCRE2 is preferred and using PCRE1 requires configure option --with-pcre1. Only the 8-bit library and headers are needed if these are packaged separately. JIT support (optional) is desirable for the best performance. For PCRE2 &gt;= 10.30 (which is desirable as matching has been re-written not to use recursion and the Unicode tables were updated to version 10)\n./configure --enable-jit\nsuffices. If building PCRE1 for use with R a suitable configure command might be\n./configure --enable-utf --enable-unicode-properties --enable-jit --disable-cpp\nThe --enable-jit flag is supported for most common CPUs but does not work (well or at all) for arm64 macOS.\nSome packages require the ‘Unicode properties’ which are optional for PCRE1: support for this and JIT can be checked at run-time by calling pcre_config().\nLibrary libcurl (version 7.28.0 or later) is required. Information on libcurl is found from the curl-config script: if that is missing or needs to be overridden10 there are macros to do so described in file config.site.10 for example to specify static linking with a build which has both shared and static libraries.\nA tar program is needed to unpack the sources and packages (including the recommended packages). A version11 that can automagically detect compressed archives is preferred for use with untar(): the configure script looks for gtar and gnutar before tar – use environment variable TAR to override this. (On NetBSD/OpenBSD systems set this to bsdtar if that is installed.)11 Such as GNU tar 1.15 or later, bsdtar (from https://github.com/libarchive/libarchive/, used as tar by FreeBSD and macOS 10.6 and later) or tar from the Heirloom Toolchest (https://heirloom.sourceforge.net/tools.html), although the latter does not support xz compression.\nThere need to be suitable versions of the tools grep and sed: the problems are usually with old AT&T and BSD variants. configure will try to find suitable versions (including looking in /usr/xpg4/bin which is used on some commercial Unixes).\nYou will not be able to build most of the manuals unless you have texi2any version 5.1 or later installed (which requires perl), and if not most of the HTML manuals will be linked to a version on CRAN. To make PDF versions of the manuals you will also need file texinfo.tex installed (which is part of the GNU texinfo distribution but is often made part of the TeX package in re-distributions) as well as texi2dvi.12 Further, the versions of texi2dvi and texinfo.tex need to be compatible: we have seen problems with older TeX distributions.12 texi2dvi is normally a shell script. Some of the issues which have been observed with broken versions of texi2dvi can be circumvented by setting the environment variable R_TEXI2DVICMD to the value emulation.\nIf you want to build from the R Subversion repository then texi2any is highly recommended as it is used to create files which are in the tarball but not stored in the Subversion repository.\nThe PDF documentation (including doc/NEWS.pdf) and building vignettes needs pdftex and pdflatex. We require LaTeX version 2005/12/01 or later (for UTF-8 support). Building PDF package manuals (including the R reference manual) and vignettes is sensitive to the version of the LaTeX package hyperref and we recommend that the TeX distribution used is kept up-to-date. A number of standard LaTeX packages are required for the PDF manuals (including url and some of the font packages such as times and helvetic and also amsfonts) and others such as hyperref and inconsolata are desirable (and without them you may need to change R’s defaults: see Making the manuals). Note that package hyperref (currently) requires packages kvoptions, ltxcmds and refcount, and inconsolata requires xkeyval. Building the base vignettes requires fancyvrb, natbib, parskip (which currently requires etoolbox) and listings. For distributions based on TeX Live the simplest approach may be to install collections collection-latex, collection-fontsrecommended, collection-latexrecommended, collection-fontsextra and collection-latexextra (assuming they are not installed by default): Fedora uses names like texlive-collection-fontsextra and Debian/Ubuntu like texlive-fonts-extra.\nPrograms qpdf and ghostscript (gs) are desirable as these will be used to compact the installed PDF vignettes and any PDF manuals.\nThe essential programs should be in your PATH at the time configure is run: this will capture the full paths.\nFor date-times to work correctly it is essential that the tables defining time zones are installed: these are usually in an OS component named something like tzdata. On most OSes they are required but installations of Alpine Linux have been seen without them. There is a configure check that recent date-times to work correctly in different time zones which catches this when installing from source (but not for binary distributions).\nThose distributing binary versions of R may need to be aware of the licences of the external libraries it is linked to (including ‘useful’ libraries from the next section). The liblzma library is in the public domain and X11, libbzip2, libcurl and zlib have MIT-style licences. PCRE and PCRE2 have a BSD-style licence which requires distribution of the licence (included in R’s COPYRIGHTS file) in binary distributions. GNU readline is licensed under GPL (which version(s) of GPL depends on the readline version)."
  },
  {
    "objectID": "Essential-and-useful-other-programs-under-a-Unix-alike.html#useful-libraries-and-programs",
    "href": "Essential-and-useful-other-programs-under-a-Unix-alike.html#useful-libraries-and-programs",
    "title": "Appendix A — Essential and useful other programs under a Unix-alike",
    "section": "A.2 Useful libraries and programs",
    "text": "A.2 Useful libraries and programs\nThe ability to use translated messages makes use of gettext and most likely needs GNU gettext: you do need this to work with new translations, but otherwise the version of the gettext runtime contained in the R sources will be used if no suitable external gettext is found.\nThe ‘modern’ version of the X11(), jpeg(), png() and tiff() graphics devices uses the Cairo and Pango libraries. Cairo version 1.2.0 or later and Pango version 1.10 or later are required (but much later versions are current). R checks for pkg-config, and uses that to check first that the pangocairo package is installed (and if not, cairo) then if suitable code can be compiled. These tests will fail if pkg-config is not installed13, and might fail if cairo was built statically unless configure option --with-static-cairo is used. Most systems with Gtk+ 2.8 or later installed will have suitable libraries: for Fedora users the pango-devel RPM and its dependencies suffice. It is possible (but very unusual on a platform with X11) to build Cairo without its cairo-xlib module in which case X11(type = \"cairo\") will not be available. Pango is optional but highly desirable as it is likely to give much better text rendering, including kerning.13 If necessary the path to pkg-config can be specified by setting PKG_CONFIG in config.site, on the configure command line or in the environment. There is a compatible re-implementation of pkg-config called pkgconf which can be used in the unlikely event that is installed but not linked to pkg-config.\nFor the best font experience with these devices you need suitable fonts installed: Linux users will want the urw-fonts package. On platforms which have it available, the msttcorefonts package14 provides TrueType versions of Monotype fonts such as Arial and Times New Roman. Another useful set of fonts is the ‘liberation’ TrueType fonts available at https://pagure.io/liberation-fonts,15 which cover the Latin, Greek and Cyrillic alphabets plus a fair range of signs. These share metrics with Arial, Times New Roman and Courier New, and contain fonts rather similar to the first two (https://en.wikipedia.org/wiki/Liberation_fonts). Then there is the ‘Free UCS Outline Fonts’ project (https://www.gnu.org/software/freefont/) which are OpenType/TrueType fonts based on the URW fonts but with extended Unicode coverage. See the R help on X11 on selecting such fonts.14 also known as ttf-mscorefonts-installer in the Debian/Ubuntu world: see also https://en.wikipedia.org/wiki/Core_fonts_for_the_Web.15 ttf-liberation in Debian/Ubuntu.\nThe bitmapped graphics devices jpeg(), png() and tiff() need the appropriate headers and libraries installed: jpeg (version 6b or later, or libjpeg-turbo) or libpng (version 1.2.7 or later) and zlib or libtiff (versions 4.0.[5-10] and 4.[123].0 have been tested) respectively. pkg-config is used if available and so needs the appropriate .pc file (which requires libtiff version 4.x and is not available on all platforms for jpeg before version 9c). They also need support for either X11 or cairo (see above). Should support for these devices not be required or broken system libraries need to be avoided there are configure options --without-libpng, --without-jpeglib and --without-libtiff. The TIFF library has many optional features such as jpeg, libz, zstd, lzma, webp, jbig and jpeg12, none of which is required for the tiff() devices but may need to be present to link the library (usually only an issue for static linking). pkg-config can tell you what other libraries are required for linking, for example by pkg-config libtiff-4 --static --libs.\nOption --with-system-tre is also available: it needs a recent version of TRE. (The latest sources are in the git repository at https://github.com/laurikari/tre/, but at the time of writing the resulting build did not complete its checks, nor did R built against the version supplied by Fedora.)\nAn implementation of XDR is required, and the R sources contain one which is likely to suffice (although a system version may have higher performance). XDR is part of RPC and historically has been part of libc on a Unix-alike. (In principle man xdr_string should tell you which library is needed, but it often does not: on some OSes it is provided by libnsl.) However some builds16 of glibc omit or hide it with the intention that the TI-RPC library be used, in which case libtirpc (and its development version) should be installed, and its headers17 need to be on the C include path or under /usr/include/tirpc.16 Including that used by Fedora.17 R uses rpc/xdr.h but that includes netconfig.h from the top tirpc directory.\nLibrary libdeflate (https://github.com/ebiggers/libdeflate) is used by memCompress() and memDecompress() if available.\nUse of the X11 clipboard selection requires the Xmu headers and libraries. These are normally part of an X11 installation (e.g. the Debian meta-package xorg-dev), but some distributions have split this into smaller parts, so for example recent versions of Fedora require the libXmu and libXmu-devel RPMs.\nSome systems (notably macOS and at least some FreeBSD systems) have inadequate support for collation in multibyte locales. It is possible to replace the OS’s collation support by that from ICU (International Components for Unicode, https://icu.unicode.org/), and this provides much more precise control over collation on all systems. ICU is available as sources and as binary distributions for (at least) most Linux distributions, FreeBSD, macOS and AIX, usually as libicu or icu4c. It will be used by default where available: should a very old or broken version of ICU be found this can be suppressed by --without-ICU.\nThe bitmap and dev2bitmap devices and function embedFonts() use ghostscript (https://www.ghostscript.com/). This should either be in your path when the command is run, or its full path specified by the environment variable R_GSCMD at that time.\nAt the time of writing a full installation on Fedora Linux used the following packages and their development versions, and this may provide a useful checklist for other systems:\nbzip2 cairo fontconfig freetype fribidi gcc gcc-gfortran gcc-c++ glib2\nglibc harfbuzz lapack libX11 libXext libXt libcurl libdeflate libicu\nlibjpeg libpng libtiff libtirpc libxcrypt ncurses pango\npkgconf-pkg-config pcre2 readline tcl tk xz zlib\nplus, preferably a TeX installation and Java.\n\nA.2.1 Tcl/Tk\nThe tcltk package needs Tcl/Tk ≥ 8.4 installed: the sources are available at https://www.tcl.tk/. To specify the locations of the Tcl/Tk files you may need the configuration options\n\n--with-tcltk\n\nuse Tcl/Tk, or specify its library directory\n\n--with-tcl-config=TCL_CONFIG\n\nspecify location of tclConfig.sh\n\n--with-tk-config=TK_CONFIG\n\nspecify location of tkConfig.sh\n\n\nor use the configure variables TCLTK_LIBS and TCLTK_CPPFLAGS to specify the flags needed for linking against the Tcl and Tk libraries and for finding the tcl.h and tk.h headers, respectively. If you have both 32- and 64-bit versions of Tcl/Tk installed, specifying the paths to the correct config files may be necessary to avoid confusion between them.\nVersions of Tcl/Tk up to 8.5.19 and 8.6.12 have been tested (including most versions of 8.4.x, but not recently).\nNote that the tk.h header includes18 X11 headers, so you will need X11 and its development files installed.18 This is true even for the ‘Aqua’ version of Tk on macOS, but distributions of that include a copy of the X11 files needed.\n\n\nA.2.2 Java support\nThe build process looks for Java support on the host system, and if it finds it sets some settings which are useful for Java-using packages (such as rJava and JavaGD: these require a full JDK). This check can be suppressed by configure option --disable-java. Configure variable JAVA_HOME can be set to point to a specific JRE/JDK, on the configure command line or in the environment.\nPrincipal amongst these settings are some paths to the Java libraries and JVM, which are stored in environment variable R_JAVA_LD_LIBRARY_PATH in file R_HOME/etc/ldpaths (or a sub-architecture-specific version). A typical setting for x86_64 Linux is\nJAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.322.b06-6.fc34.x86_64/jre\nR_JAVA_LD_LIBRARY_PATH=${JAVA_HOME}/lib/amd64/server\nUnfortunately this depends on the exact version of the JRE/JDK installed, and so may need updating if the Java installation is updated. This can be done by running R CMD javareconf which updates settings in both R_HOME/etc/Makeconf and R_HOME/etc/ldpaths. See R CMD javareconf --help for details: note that this needs to be done by the account owning the R installation.\nAnother way of overriding those settings is to set the environment variable R_JAVA_LD_LIBRARY_PATH (before R is started, hence not in ~/.Renviron), which suffices to run already-installed Java-using packages. For example\nR_JAVA_LD_LIBRARY_PATH=/usr/lib/jvm/java-1.8.0/jre/lib/amd64/server\nIt may be possible to avoid this by specifying an invariant link as the path when configuring. For example, on that system any of\nJAVA_HOME=/usr/lib/jvm/java\nJAVA_HOME=/usr/lib/jvm/java-1.8.0\nJAVA_HOME=/usr/lib/jvm/java-1.8.0/jre\nJAVA_HOME=/usr/lib/jvm/jre-1.8.0\nworked (since the ‘auto’ setting of /etc/alternatives chose Java 8 aka 1.8.0).\n‘Non-server’ Oracle distributions of Java as from version 11 are of a full JDK. However, Linux distributions can be confusing: for example Fedora 34 had\njava-1.8.0-openjdk\njava-1.8.0-openjdk-devel\njava-openjdk\njava-openjdk-devel\njava-11-openjdk\njava-11-openjdk-devel\njava-17-openjdk\njava-17-openjdk-devel\njava-latest-openjdk\njava-latest-openjdk-devel\nwhere the -devel RPMs are needed to complete the JDK. Debian/Ubuntu use -jre and -jdk, e.g.\nsudo apt install default-jdk\n\n\nA.2.3 Other compiled languages\nSome add-on packages need a C++ compiler. This is specified by the configure variables CXX, CXXFLAGS and similar. configure will normally find a suitable compiler. It is possible to specify an alternative C++17 compiler by the configure variables CXX17, CXX17STD, CXX17FLAGS and similar (see C++ Support). Again, configure will normally find a suitable value for CXX17STD if the compiler given by CXX is capable of compiling C++17 code, but it is possible that a completely different compiler will be needed. (Similar macros are provided for C++20.)\nFor source files with extension .f90 or .f95 containing free-form Fortran, the compiler defined by the macro FC is used by R CMD INSTALL. Note that it is detected by the name of the command without a test that it can actually compile Fortran 90 code. Set the configure variable FC to override this if necessary: variables FCFLAGS and FCLIBS_XTRA might also need to be set.\nSee file config.site in the R source for more details about these variables."
  },
  {
    "objectID": "Essential-and-useful-other-programs-under-a-Unix-alike.html#linear-algebra",
    "href": "Essential-and-useful-other-programs-under-a-Unix-alike.html#linear-algebra",
    "title": "Appendix A — Essential and useful other programs under a Unix-alike",
    "section": "A.3 Linear algebra",
    "text": "A.3 Linear algebra\nThe linear algebra routines in R make use of BLAS (Basic Linear Algebra Subprograms, https://netlib.org/blas/faq.html) routines, and most make use of routines from LAPACK (Linear Algebra PACKage, https://netlib.org/lapack/). The R sources contain reference (Fortran) implementations of these, but they can be replaced by external libraries, usually those tuned for speed on specific CPUs. These libraries normally contain all of the BLAS routines and some tuned LAPACK routines and perhaps the rest of LAPACK from the reference implementation. Because of the way linking works, using an external BLAS library may necessitate using the version of LAPACK it contains.\nNote that the alternative implementations will not give identical numeric results. Some differences may be benign (such the signs of SVDs and eigenvectors), but the optimized routines can be less accurate and (particularly for LAPACK) can be from older versions with fewer corrections. However, R relies on ISO/IEC 60559 compliance. This can be broken if for example the code assumes that terms with a zero factor are always zero and do not need to be computed—whereas x*0 can be NaN. The internal BLAS has been extensively patched to avoid this whereas MKL’s documentation has warned\n\nLAPACK routines assume that input matrices do not contain IEEE 754 special values such as INF or NaN values. Using these special values may cause LAPACK to return unexpected results or become unstable.\n\nSome of the external libraries are multi-threaded. One issue is that R profiling (which uses the SIGPROF signal) may cause problems, and you may want to disable profiling if you use a multi-threaded BLAS. Note that using a multi-threaded BLAS can result in taking more CPU time and even more elapsed time (occasionally dramatically so) than using a similar single-threaded BLAS. On a machine running other tasks, there can be contention for CPU caches that reduces the effectiveness of the optimization of cache use by a BLAS implementation: some people warn that this is especially problematic for hyperthreaded CPUs.\nBLAS and LAPACK routines may be used inside threaded code, for example in OpenMP sections in packages such as mgcv. The reference implementations are thread-safe but external ones may not be (even single-threaded ones): this can lead to hard-to-track-down incorrect results or segfaults.\nThere is a tendency for re-distributors of R to use ‘enhanced’ linear algebra libraries without explaining their downsides.\n\nA.3.1 BLAS\nAn external BLAS library has to be explicitly requested at configure time.\nYou can specify a particular BLAS library via a value for the configuration option --with-blas. If this is given with no =, its value is taken from the environment variable BLAS_LIBS, set for example in config.site. If neither the option nor the environment variable supply a value, a search is made for a suitable19 BLAS. If the value is not obviously a linker command (starting with a dash or giving the path to a library), it is prefixed by -l, so19 The search order is currently OpenBLAS, BLIS, ATLAS, platform-specific choices (see below) and finally a generic libblas.\n--with-blas=\"foo\"\nis an instruction to link against -lfoo to find an external BLAS (which needs to be found both at link time and run time).\nThe configure code checks that the external BLAS is complete (as of LAPACK 3.9.1: it must include all double precision and double complex routines, as well as LSAME), and appears to be usable. However, an external BLAS has to be usable from a shared object (so must contain position-independent code), and that is not checked. Also, the BLAS can be switched after configure is run, either as a symbolic link or by the mechanisms mentioned below, and this can defeat the completeness check.\nSome enhanced BLASes are compiler-system-specific (Accelerate on macOS, sunperf on Solaris20, libessl on IBM). The correct incantation for these is often found via --with-blas with no value on the appropriate platforms.20 Using the Oracle Developer Studio cc and f95 compilers\nNote that under Unix (but not under Windows) if R is compiled against a non-default BLAS and --enable-BLAS-shlib is not used (it is the default on all platforms except AIX), then all BLAS-using packages must also be. So if R is re-built to use an enhanced BLAS then packages such as quantreg will need to be re-installed.\nDebian/Ubuntu systems provide a system-specific way to switch the BLAS in use: Build R with --with-blas to select the OS version of the reference BLAS, and then use update-alternatives to switch between the available BLAS libraries. See https://wiki.debian.org/DebianScience/LinearAlgebraLibraries.\nFedora 33 and later offer ‘FlexiBLAS’, a similar mechanism for switching the BLAS in use (https://www.mpi-magdeburg.mpg.de/projects/flexiblas). However, rather than overriding libblas, this requires configuring R with option --with-blas=flexiblas. ‘Backend’ wrappers are available for the reference BLAS, ATLAS and serial, threaded and OpenMP builds of OpenBLAS and BLIS. This can be controlled from a running R session by package flexiblas.\nBLAS implementations which use parallel computations can be non-deterministic: this is known for ATLAS.\n\n\nA.3.2 ATLAS\nATLAS (https://math-atlas.sourceforge.net/) is a “tuned” BLAS that runs on a wide range of Unix-alike platforms. Unfortunately it is built by default as a static library that on some platforms may not be able to be used with shared objects such as are used in R packages. Be careful when using pre-built versions of ATLAS static libraries (they seem to work on ix86 platforms, but not always on x86_64 ones).\nATLAS contains replacements for a small number of LAPACK routines, but can be built to merge these with the reference LAPACK sources to include a full LAPACK library.\nRecent versions of ATLAS can be built as a single shared library, either libsatlas or libtatlas (serial or threaded respectively): these may even contain a full LAPACK. Such builds can be used by one of\n--with-blas=satlas\n--with-blas=tatlas\nor, as on x86_64 Fedora where a path needs to be specified,\n--with-blas=\"-L/usr/lib64/atlas -lsatlas\"\n--with-blas=\"-L/usr/lib64/atlas -ltatlas\"\nDistributed ATLAS libraries cannot be tuned to your machine and so are a compromise: for example Fedora tunes21 x86_64 RPMs for CPUs with SSE3 extensions, and separate RPMs may be available for specific CPU families.21 The only way to see exactly which CPUs the distributed libraries have been tuned for is to read the atlas.spec file.\nNote that building R on Linux against distributed shared libraries may need -devel or -dev packages installed.\nLinking against multiple static libraries requires one of\n--with-blas=\"-lf77blas -latlas\"\n--with-blas=\"-lptf77blas -lpthread -latlas\"\n--with-blas=\"-L/path/to/ATLAS/libs -lf77blas -latlas\"\n--with-blas=\"-L/path/to/ATLAS/libs -lptf77blas -lpthread -latlas\"\nConsult its installation guide22 for how to build ATLAS as a shared library or as a static library with position-independent code (on platforms where that matters).22 https://math-atlas.sourceforge.net/atlas_install/\nAccording to the ATLAS FAQ23 the maximum number of threads used by multi-threaded ATLAS is set at compile time. Also, the author advises against using multi-threaded ATLAS on hyperthreaded CPUs without restricting affinities at compile-time to one virtual core per physical CPU. (For the Fedora libraries the compile-time flag specifies 4 threads.)23 https://math-atlas.sourceforge.net/faq.html#tnum\n\n\nA.3.3 OpenBLAS and BLIS\nDr Kazushige Goto wrote a tuned BLAS for several processors and OSes, which was frozen in 2010. OpenBLAS (https://www.openblas.net/) is a descendant project with support for some later CPUs.\nThis can be used by configuring R with something like\n--with-blas=\"openblas\"\nSee see Shared BLAS for an alternative (and in many ways preferable) way to use them.\nSome platforms provide multiple builds of OpenBLAS: for example Fedora has RPMs2424 (and more, e.g. for 64-bit ints and static versions).\nopenblas\nopenblas-threads\nopenblas-openmp\nproviding shared libraries\nlibopenblas.so\nlibopenblasp.so\nlibopenblaso.so\nrespectively, each of which can be used as a shared BLAS. For the second and third the number of threads is controlled by OPENBLAS_NUM_THREADS and OMP_NUM_THREADS (as usual for OpenMP) respectively.\nThese and their Debian equivalents contain a complete LAPACK implementation.\nNote that building R on Linux against distributed libraries may need -devel or -dev packages installed.\nFor ix86 and x86_64 CPUs most distributed libraries contain several alternatives for different CPU microarchitectures with the choice being made at run time.\nAnother descendant project is BLIS (https://github.com/flame/blis). This has (in Fedora) shared libraries\nlibblis.so\nlibblisp.so\nlibbliso.so\n(p for ‘threads’, o for OpenMP as for OpenBLAS) which can also be used as a shared BLAS. The Fedora builds do not include LAPACK in the BLIS libraries.\n\n\nA.3.4 Intel MKL\nFor Intel processors (and perhaps others) and some distributions of Linux, there is Intel’s Math Kernel Library25. You are encouraged to read the documentation which is installed with the library before attempting to link to MKL. This includes a ‘link line advisor’ which will suggest appropriate incantations: its use is recommended. Or see https://www.intel.com/content/www/us/en/developer/tools/oneapi/onemkl-link-line-advisor.html#gs.vpt6qp (which at the time of writing selected the Intel library for linking with GCC).25 Nowadays known as ‘Intel oneAPI Math Kernel Library’ or even ‘oneMKL’.\nThere are also versions of MKL for macOS26 and Windows, but when these have been tried they did not work with the default compilers used for R on those platforms.26 The issue for macOS has been the use of double-complex routines.\nThe following examples have been used with MKL versions 10.3 to 2023.2.0, for GCC compilers on x86_64 CPUs. (See also Intel compilers.)\nTo use a sequential version of MKL we used\nMKL_LIB_PATH=/path/to/intel_mkl/mkl/lib/intel64\nexport LD_LIBRARY_PATH=$MKL_LIB_PATH\nMKL=\"-L${MKL_LIB_PATH} -lmkl_gf_lp64 -lmkl_core -lmkl_sequential\"\n./configure --with-blas=\"$MKL\" --with-lapack\nThe option --with-lapack is used since MKL contains a tuned copy of LAPACK (often older than the current version) as well as the BLAS (see LAPACK), although this can be omitted.\nThreaded MKL may be used by replacing the line defining the variable MKL by\nMKL=\"-L${MKL_LIB_PATH} -lmkl_gf_lp64 -lmkl_core \\\n     -lmkl_gnu_thread -dl -fopenmp\"\nR can also be linked against a single shared library, libmkl_rt.so, for both BLAS and LAPACK, but the correct OpenMP and MKL interface layer then has to be selected via environment variables. With 64-bit builds and the GCC compilers, we used\nexport MKL_INTERFACE_LAYER=GNU,LP64 \nexport MKL_THREADING_LAYER=GNU\nOn Debian/Ubuntu, MKL is provided by package intel-mkl-full and one can set libmkl_rt.so as the system-wide implementation of both BLAS and LAPACK during installation of the package, so that also R installed from Debian/Ubuntu package r-base would use it. It is, however, still essential to set MKL_INTERFACE_LAYER and MKL_THREADING_LAYER before running R, otherwise MKL computations will produce incorrect results. R does not have to be rebuilt to use MKL, but configure includes tests which may discover some errors such as a failure to set the correct OpenMP and MKL interface layer.\nNote that the Debian/Ubuntu distribution can be quite old (for example 2020.4 in mid-2023 when 2023.1 was current): this can be important for the LAPACK version included.\nThe default number of threads will be chosen by the OpenMP software, but can be controlled by setting OMP_NUM_THREADS or MKL_NUM_THREADS, and in recent versions seems to default to a sensible value for sole use of the machine. (Parallel MKL has not always passed make check-all, but did with MKL 2019.4 and later.)\nMKL includes a partial implementation of FFTW3, which causes trouble for applications that require some of the FFTW3 functionality unsupported in MKL. Please see the MKL manuals for description of these limitations and for instructions on how to create a custom version of MKL which excludes the FFTW3 wrappers.\nThere is Intel documentation for building R with MKL at https://www.intel.com/content/www/us/en/developer/articles/technical/using-onemkl-with-r.html: that includes\n-Wl,--no-as-needed\nwhich we have not found necessary.\n\n\nA.3.5 Shared BLAS\nThe BLAS library will be used for many of the add-on packages as well as for R itself. This means that it is better to use a shared/dynamic BLAS library, as most of a static library will be compiled into the R executable and each BLAS-using package.\nR offers the option of compiling the BLAS into a dynamic library libRblas stored in R_HOME/lib and linking both R itself and all the add-on packages against that library.\nThis is the default on all platforms except AIX unless an external BLAS is specified and found: for the latter it can be used by specifying the option --enable-BLAS-shlib, and it can always be disabled via --disable-BLAS-shlib.\nThis has both advantages and disadvantages.\n\nIt saves space by having only a single copy of the BLAS routines, which is helpful if there is an external static BLAS (as used to be standard for ATLAS).\nThere may be performance disadvantages in using a shared BLAS. Probably the most likely is when R’s internal BLAS is used and R is not built as a shared library, when it is possible to build the BLAS into R.bin (and libR.a) without using position-independent code. However, experiments showed that in many cases using a shared BLAS was as fast, provided high levels of compiler optimization are used.\nIt is easy to change the BLAS without needing to re-install R and all the add-on packages, since all references to the BLAS go through libRblas, and that can be replaced. Note though that any dynamic libraries the replacement links to will need to be found by the linker: this may need the library path to be changed in R_HOME/etc/ldpaths.\n\nAnother option to change the BLAS in use is to symlink a single dynamic BLAS library to R_HOME/lib/libRblas.so. For example, just\nmv R_HOME/lib/libRblas.so R_HOME/lib/libRblas.so.keep\nln -s /usr/lib64/libopenblasp.so.0 R_HOME/lib/libRblas.so\non x86_64 Fedora will change the BLAS used to multithreaded OpenBLAS. A similar link works for most versions of the OpenBLAS (provided the appropriate lib directory is in the run-time library path or ld.so cache). It can also be used for a single-library ATLAS, so on x86_64 Fedora either of\nln -s /usr/lib64/atlas/libsatlas.so.3 R_HOME/lib/libRblas.so\nln -s /usr/lib64/atlas/libtatlas.so.3 R_HOME/lib/libRblas.so\ncan be used with its distributed ATLAS libraries. (If you have the -devel RPMs installed you can omit the .0/.3.)\nNote that rebuilding or symlinking libRblas.so may not suffice if the intention is to use a modified LAPACK contained in an external BLAS: the latter could even cause conflicts. However, on Fedora where the OpenBLAS distribution contains a copy of LAPACK, it is the latter which is used.\n\n\nA.3.6 LAPACK\nIf when configuring R a system LAPACK library is found of version 3.10.0 or later (and does not contain BLAS routines) it will be used instead of compiling the LAPACK code in the package sources. This can be prevented by configuring R with --without-lapack. Using a static liblapack.a is not supported.\nIt is assumed that -llapack is the reference LAPACK library but on Debian/Ubuntu it can be switched, including after R is installed. On such a platform it is better to use --without-lapack or --with-blas --with-lapack (see below) explicitly. The known examples27 of a non-reference LAPACK library found at installation all contain BLAS routines so are not used by a default configure run.27 ATLAS, OpenBLAS and Accelerate.\nProvision is made for specifying an external LAPACK library with option --with-lapack, principally to cope with BLAS libraries which contain a copy of LAPACK (such as Accelerate on macOS and some builds of ATLAS, FlexiBLAS, MKL and OpenBLAS on ix86/x86_64 Linux). At least LAPACK version 3.2 is required. This can only be done if --with-blas has been used.\nHowever, the likely performance gains are thought to be small (and may be negative). The default is not to search for a suitable LAPACK library, and this is definitely not recommended. You can specify a specific LAPACK library or a search for a generic library by the configuration option --with-lapack without a value. The default for --with-lapack is to check the BLAS library (for function DPSTRF) and then look for an external library -llapack. Sites searching for the fastest possible linear algebra may want to build a LAPACK library using the ATLAS-optimized subset of LAPACK. Similarly, OpenBLAS can be built to contain an optimized subset of LAPACK or a full LAPACK (the latter seeming to be the default).\nA value for --with-lapack can be set via the environment variable LAPACK_LIBS, but this will only be used if --with-lapack is specified and the BLAS library does not contain LAPACK.\nPlease bear in mind that using --with-lapack is provided only because it is necessary on some platforms and because some users want to experiment with claimed performance improvements. In practice its main uses are without a value,\n\nwith an ‘enhanced’ BLAS such as ATLAS, FlexiBLAS, MKL or OpenBLAS which contains a full LAPACK (to avoid possible conflicts), or\non Debian/Ubuntu systems to select the system liblapack which can be switched by the ‘alternatives’ mechanism.\n\n\n\nA.3.7 Caveats\nAs with all libraries, you need to ensure that they and R were compiled with compatible compilers and flags. For example, this has meant that on Sun Sparc using the Oracle compilers the flag -dalign is needed if sunperf is to be used.\nOn some systems it has been necessary that an external BLAS/LAPACK was built with the same Fortran compiler used to build R.\nBLAS and LAPACK libraries built with recent versions of gfortran require calls from C/C++ to handle ‘hidden’ character lengths — R itself does so but many packages used not to and some have segfaulted. This was largely circumvented by using the Fortran flag -fno-optimize-sibling-calls (formerly set by configure if it detected gfortran 7 or later): however use of the R headers which include those character-length arguments is no longer optional in packages.\nLAPACK 3.9.0 (and probably earlier) had a bug in which the DCOMBSSQ subroutine may cause NA to be interpreted as zero. This is fixed in the R 3.6.3 and later sources, but if you use an external LAPACK, you may need to fix it there. (The bug was corrected in 3.9.1 and the routine removed in 3.10.1.)\nThe code (in dlapack.f) should read\n*     ..\n*     .. Executable Statements ..\n*\n      IF( V1( 1 ).GE.V2( 1 ) ) THEN\n         IF( V1( 1 ).NE.ZERO ) THEN\n            V1( 2 ) = V1( 2 ) + ( V2( 1 ) / V1( 1 ) )**2 * V2( 2 )\n         ELSE\n            V1( 2 ) = V1( 2 ) + V2( 2 )\n         END IF\n      ELSE\n         V1( 2 ) = V2( 2 ) + ( V1( 1 ) / V2( 1 ) )**2 * V1( 2 )\n         V1( 1 ) = V2( 1 )\n      END IF\n      RETURN\n(The inner ELSE clause was missing in LAPACK 3.9.0.)\nIf you do use an external LAPACK, be aware of potential problems with other bugs in the LAPACK sources (or in the posted corrections to those sources), seen several times in Linux distributions over the years. We have even seen distributions with missing LAPACK routines from their liblapack.\nWe rely on limited support in LAPACK for matrices with 2^{31} or more elements: it is possible that an external LAPACK will not have that support.\nFootnotes"
  },
  {
    "objectID": "Configuration-on-a-Unix-alike.html#configuration-options",
    "href": "Configuration-on-a-Unix-alike.html#configuration-options",
    "title": "Appendix B — Configuration on a Unix-alike",
    "section": "B.1 Configuration options",
    "text": "B.1 Configuration options\nconfigure has many options: running\n./configure --help\nwill give a list. Probably the most important ones not covered elsewhere are (defaults in brackets)\n\n--with-x\n\nuse the X Window System [yes]\n\n--x-includes=DIR\n\nX include files are in DIR\n\n--x-libraries=DIR\n\nX library files are in DIR\n\n--with-readline\n\nuse readline library (if available) [yes]\n\n--enable-R-profiling\n\nattempt to compile support for Rprof() [yes]\n\n--enable-memory-profiling\n\nattempt to compile support for Rprofmem() and tracemem() [no]\n\n--enable-R-shlib\n\nbuild R as a shared/dynamic library [no]\n\n--enable-BLAS-shlib\n\nbuild the BLAS as a shared/dynamic library [yes, except on AIX]\n\n\nYou can use --without-foo or --disable-foo for the negatives.\nYou will want to use --disable-R-profiling if you are building a profiled executable of R (e.g. with -pg). Support for R profiling requires OS support for POSIX threads (aka pthreads), which are available on all mainstream Unix-alike platforms.\nFlag --enable-R-shlib causes the make process to build R as a dynamic (shared) library, typically called libR.so, and link the main R executable R.bin against that library. This can only be done if all the code (including system libraries) can be compiled into a dynamic library, and there may be a performance1 penalty. So you probably only want this if you will be using an application which embeds R. Note that C code in packages installed on an R system linked with --enable-R-shlib is linked against the dynamic library and so such packages cannot be used from an R system built in the default way. Also, because packages are linked against R they are on some OSes also linked against the dynamic libraries R itself is linked against, and this can lead to symbol conflicts.1 We have measured 15–20% on i686 Linux and around 10% on x86_64 Linux.\nFor maximally effective use of valgrind, R should be compiled with valgrind instrumentation. The configure option is --with-valgrind-instrumentation=level, where level is 0, 1 or 2. (Level 0 is the default and does not add anything.) The system headers for valgrind are required: on Linux they may be in a separate package such as valgrind-devel.\nIf you need to re-configure R with different options you may need to run make clean or even make distclean before doing so.\nThe configure script has other generic options added by autoconf and which are not supported for R: in particular building for one architecture on a different host is not possible."
  },
  {
    "objectID": "Configuration-on-a-Unix-alike.html#internationalization-support",
    "href": "Configuration-on-a-Unix-alike.html#internationalization-support",
    "title": "Appendix B — Configuration on a Unix-alike",
    "section": "B.2 Internationalization support",
    "text": "B.2 Internationalization support\nTranslation of messages is supported via GNU gettext unless disabled by the configure option --disable-nls. The configure report will show NLS as one of the ‘Additional capabilities’ if support has been compiled in, and running in an English locale (but not the C locale) will include\n  Natural language support but running in an English locale\nin the greeting on starting R."
  },
  {
    "objectID": "Configuration-on-a-Unix-alike.html#configuration-variables",
    "href": "Configuration-on-a-Unix-alike.html#configuration-variables",
    "title": "Appendix B — Configuration on a Unix-alike",
    "section": "B.3 Configuration variables",
    "text": "B.3 Configuration variables\nIf you need or want to set certain configure variables to something other than their default, you can do that by either editing the file config.site (which documents many of the variables you might want to set: others can be seen in file etc/Renviron.in) or on the command line as\n./configure VAR=value\nIf you are building in a directory different from the sources, there can be copies of config.site in the source and the build directories, and both will be read (in that order). In addition, if there is a file ~/.R/config, it is read between the config.site files in the source and the build directories.\nThere is also a general autoconf mechanism for config.site files, which are read before any of those mentioned in the previous paragraph. This looks first at a file specified by the environment variable CONFIG_SITE, and if not is set at files such as /usr/local/share/config.site and /usr/local/etc/config.site in the area (exemplified by /usr/local) where R would be installed.\nThese variables are precious, implying that they do not have to be exported to the environment, are kept in the cache even if not specified on the command line, checked for consistency between two configure runs (provided that caching is used), and are kept during automatic reconfiguration as if having been passed as command line arguments, even if no cache is used.\nSee the variable output section of configure --help for a list of all these variables.\nIf you find you need to alter configure variables, it is worth noting that some settings may be cached in the file config.cache, and it is a good idea to remove that file (if it exists) before re-configuring. Note that caching is turned off by default: use the command line option --config-cache (or -C) to enable caching.\n\nB.3.1 Setting paper size\nOne common variable to change is R_PAPERSIZE, which defaults to a4, not letter. (Valid values are a4, letter, legal and executive.)\nThis is used both when configuring R to set the default, and when running R to override the default. It is also used to set the paper size when making PDF manuals.\nThe configure default will most often be a4 if R_PAPERSIZE is unset. (If the program paperconf is found, present in many Linux distributions, or the environment variable PAPERSIZE is set, these are used to produce the default.)\n\n\nB.3.2 Setting the browsers\nAnother precious variable is R_BROWSER, the default HTML browser, which should take a value of an executable in the user’s path or specify a full path.\nIts counterpart for PDF files is R_PDFVIEWER.\n\n\nB.3.3 Compilation flags\nIf you have libraries and header files, e.g., for GNU readline, in non-system directories, use the variables LDFLAGS (for libraries, using -L flags to be passed to the linker) and CPPFLAGS (for header files, using -I flags to be passed to the C/C++ preprocessors), respectively, to specify these locations. These default to -L/usr/local/lib (LDFLAGS, -L/usr/local/lib64 on most 64-bit Linux OSes) and -I/usr/local/include (CPPFLAGS, but note that on most systems /usr/local/include is regarded as a system include directory and so instances in that macro will be skipped) to catch the most common cases. If libraries are still not found, then maybe your compiler/linker does not support re-ordering of -L and -l flags. In this case, use a different compiler (or a front-end shell script which does the re-ordering).\nThese flags can also be used to build a faster-running version of R. On most platforms using gcc, having -O3 in CFLAGS and FFLAGS produces worthwhile performance gains with gcc and gfortran, but may result in a less reliable build (both segfaults and incorrect numeric computations have been seen). On systems using the GNU linker (especially those using R as a shared library), it is likely that including -Wl,-O1 in LDFLAGS is worthwhile, and '-Bdirect,--hash-style=both,-Wl,-O1’ is recommended at https://lwn.net/Articles/192624/. Tuning compilation to a specific CPU family (e.g. -mtune=native for gcc) can give worthwhile performance gains, especially on older architectures such as ix86.\n\n\nB.3.4 Making manuals\nThe default settings for making the manuals are controlled by R_RD4PDF and R_PAPERSIZE."
  },
  {
    "objectID": "Configuration-on-a-Unix-alike.html#setting-the-shell",
    "href": "Configuration-on-a-Unix-alike.html#setting-the-shell",
    "title": "Appendix B — Configuration on a Unix-alike",
    "section": "B.4 Setting the shell",
    "text": "B.4 Setting the shell\nBy default the shell scripts such as R will be #!/bin/sh scripts (or using the SHELL chosen by configure). This is almost always satisfactory, but on a few systems /bin/sh is not a Bourne shell or clone, and the shell to be used can be changed by setting the configure variable R_SHELL to a suitable value (a full path to a shell, e.g. /usr/local/bin/bash)."
  },
  {
    "objectID": "Configuration-on-a-Unix-alike.html#using-make",
    "href": "Configuration-on-a-Unix-alike.html#using-make",
    "title": "Appendix B — Configuration on a Unix-alike",
    "section": "B.5 Using make",
    "text": "B.5 Using make\nTo build in a separate directory you need a make that supports the VPATH variable, for example GNU make and dmake.\nIf you want to use a make by another name, for example if your GNU make is called gmake, you need to set the variable MAKE at configure time, for example\n./configure MAKE=gmake"
  },
  {
    "objectID": "Configuration-on-a-Unix-alike.html#using-fortran",
    "href": "Configuration-on-a-Unix-alike.html#using-fortran",
    "title": "Appendix B — Configuration on a Unix-alike",
    "section": "B.6 Using Fortran",
    "text": "B.6 Using Fortran\nTo compile R, you need a Fortran 90 compiler. The current default is to search for gfortran, g95, xlf95 f95, fort, ifort, ifc, efc, pgfortran, pgf95 lf95, ftn, nagfor, xlf90, f90, pgf90, pghpf, epcf90. (Note that these are searched for by name, without checking the standard of Fortran they support.) The command and flags used should support fixed-form Fortran with extension .f: in the unusual case that a specific flag is needed for free-form Fortran with extension .f90 or .f95, this can be specified as part of FCFLAGS.\nThe search mechanism can be changed using the configure variable FC which specifies the command that runs the Fortran compiler. If your Fortran compiler is in a non-standard location, you should set the environment variable PATH accordingly before running configure, or use the configure variable FC to specify its full path.\nIf your Fortran libraries are in slightly peculiar places, you should also look at LD_LIBRARY_PATH (or your system’s equivalent) to make sure that all libraries are on this path.\nNote that only Fortran compilers which convert identifiers to lower case are supported.\nYou must set whatever compilation flags (if any) are needed to ensure that Fortran integer is equivalent to a C int pointer and Fortran double precision is equivalent to a C double pointer. This is checked during the configuration process.\nSome of the Fortran code makes use of DOUBLE COMPLEX and COMPLEX*16 variables. This is checked for at configure time, as well as its equivalence to the Rcomplex C structure defined in R_ext/Complex.h.\ngfortran 10 by default gives a compilation error for the previously widespread practice of passing a Fortran array element where an array is expected, or a scalar instead of a length-one array. See https://gcc.gnu.org/gcc-10/porting_to.html. gfortran 12 errors in more cases of this."
  },
  {
    "objectID": "Configuration-on-a-Unix-alike.html#compile-and-load-flags",
    "href": "Configuration-on-a-Unix-alike.html#compile-and-load-flags",
    "title": "Appendix B — Configuration on a Unix-alike",
    "section": "B.7 Compile and load flags",
    "text": "B.7 Compile and load flags\nA wide range of flags can be set in the file config.site or as configure variables on the command line. We have already mentioned\n\nCPPFLAGS\n\nheader file search directory (-I) and any other miscellaneous options for the C and C++ preprocessors and compilers\n\nLDFLAGS\n\npath (-L), stripping (-s) and any other miscellaneous options for the linker\n\n\nand others include\n\nCFLAGS\n\ndebugging and optimization flags, C\n\nMAIN_CFLAGS\n\nditto, for compiling the main program (e.g. when profiling)\n\nSHLIB_CFLAGS\n\nfor shared objects (no known examples)\n\nFFLAGS\n\ndebugging and optimization flags, fixed-form Fortran\n\nFCFLAGS\n\ndebugging and optimization flags, free-form Fortran\n\nSAFE_FFLAGS\n\nditto for source files which need exact floating point behaviour\n\nMAIN_FFLAGS\n\nditto, for compiling the main program (e.g. when profiling)\n\nSHLIB_FFLAGS\n\nfor shared objects (no known examples)\n\nMAIN_LDFLAGS\n\nadditional flags for the main link\n\nSHLIB_LDFLAGS\n\nadditional flags for linking the shared objects\n\nLIBnn\n\nthe primary library directory, lib or lib64\n\nCPICFLAGS\n\nspecial flags for compiling C code to be turned into a shared object\n\nFPICFLAGS\n\nspecial flags for compiling Fortran code to be turned into a shared object\n\nCXXPICFLAGS\n\nspecial flags for compiling C++ code to be turned into a shared object\n\nDEFS\n\ndefines to be used when compiling C code in R itself\n\n\nLibrary paths specified as -L/lib/path in LDFLAGS are collected together and prepended to LD_LIBRARY_PATH (or your system’s equivalent), so there should be no need for -R or -rpath flags.\nVariables such as CPICFLAGS are determined where possible by configure. Some systems allows two types of PIC flags, for example -fpic and -fPIC, and if they differ the first allows only a limited number of symbols in a shared object. Since R as a shared library has about 6200 symbols, if in doubt use the larger version.\nOther variables often set by configure include MAIN_LDFLAGS, SAFE_FFLAGS, SHLIB_LDFLAGS and SHLIB_CXXLDFLAGS: see file config.site in the sources for more documentation on these and others.\nTo compile a profiling version of R, one might for example want to use MAIN_CFLAGS=-pg, MAIN_FFLAGS=-pg, MAIN_LDFLAGS=-pg on platforms where -pg cannot be used with position-independent code.\nBeware: it may be necessary to set CFLAGS and FFLAGS in ways compatible with the libraries to be used: one possible issue is the alignment of doubles, another is the way structures are passed.\nOn some platforms configure will select additional flags for CFLAGS, CPPFLAGS and LIBS in R_XTRA_CFLAGS (and so on). These are for options which are always required, for example to force IEC 60559 compliance."
  },
  {
    "objectID": "Configuration-on-a-Unix-alike.html#maintainer-mode",
    "href": "Configuration-on-a-Unix-alike.html#maintainer-mode",
    "title": "Appendix B — Configuration on a Unix-alike",
    "section": "B.8 Maintainer mode",
    "text": "B.8 Maintainer mode\nThere are several files that are part of the R sources but can be re-generated from their own sources by configuring with option --enable-maintainer-mode and then running make in the build directory. This requires other tools to be installed, discussed in the rest of this section.\nFile configure is created from configure.ac and the files under m4 by autoconf and aclocal (part of the automake package). There is a formal version requirement on autoconf of 2.69 or later, but it is unlikely that anything other than the most recent versions2 have been thoroughly tested.2 at the time of revision of this para in late 2021, autoconf-2.71 and automake-1.16.5.\nFile src/include/config.h is created by autoheader (part of autoconf).\nGrammar files *.y are converted to C sources by an implementation of yacc, usually bison -y: these are found in src/main and src/library/tools/src. It is known that earlier versions of bison generate code which reads (and in some cases writes) outside array bounds: bison 2.6.1 was found to be satisfactory.\nThe ultimate sources for package compiler are in its noweb directory. To re-create the sources from src/library/compiler/noweb/compiler.nw, the command notangle is required. Some Linux distributions include this command in package noweb. It can also be installed from the sources at https://www.cs.tufts.edu/~nr/noweb/3. The package sources are only re-created even in maintainer mode if src/library/compiler/noweb/compiler.nw has been updated.3 The links there have proved difficult to access, in which case grab the copy made available at https://developer.r-project.org/noweb-2.11b.tgz.\nFootnotes"
  },
  {
    "objectID": "Platform-notes.html#x11-issues",
    "href": "Platform-notes.html#x11-issues",
    "title": "Appendix C — Platform notes",
    "section": "C.1 X11 issues",
    "text": "C.1 X11 issues\nThe X11() graphics device is the one started automatically on Unix-alikes (except most macOS builds) when plotting. As its name implies, it displays on a (local or remote) X server, and relies on the services provided by the X server.\nThe ‘modern’ version of the X11() device is based on cairo graphics and (in most implementations) uses fontconfig to pick and render fonts. This is done on the server, and although there can be selection issues, they are more amenable than the issues with X11() discussed in the rest of this section.\nWhen X11 was designed, most displays were around 75dpi, whereas today they are of the order of 100dpi or more. If you find that X11() is reporting2 missing font sizes, especially larger ones, it is likely that you are not using scalable fonts and have not installed the 100dpi versions of the X11 fonts. The names and details differ by system, but will likely have something like Fedora’s2 for example, X11 font at size 14 could not be loaded.\nxorg-x11-fonts-75dpi\nxorg-x11-fonts-100dpi\nxorg-x11-fonts-ISO8859-2-75dpi\nxorg-x11-fonts-Type1\nxorg-x11-fonts-cyrillic\nand you need to ensure that the -100dpi versions are installed and on the X11 font path (check via xset -q). The X11() device does try to set a pointsize and not a pixel size: laptop users may find the default setting of 12 too large (although very frequently laptop screens are set to a fictitious dpi to appear like a scaled-down desktop screen).\nMore complicated problems can occur in non-Western-European locales, so if you are using one, the first thing to check is that things work in the C locale. The likely issues are a failure to find any fonts or glyphs being rendered incorrectly (often as a pair of ASCII characters). X11 works by being asked for a font specification and coming up with its idea of a close match. For text (as distinct from the symbols used by plotmath), the specification is the first element of the option \"X11fonts\" which defaults to\n\"-adobe-helvetica-%s-%s-*-*-%d-*-*-*-*-*-*-*\"\nIf you are using a single-byte encoding, for example ISO 8859-2 in Eastern Europe or KOI8-R in Russian, use xlsfonts to find an appropriate family of fonts in your encoding (the last field in the listing). If you find none, it is likely that you need to install further font packages, such as xorg-x11-fonts-ISO8859-2-75dpi and xorg-x11-fonts-cyrillic shown in the listing above.\nMulti-byte encodings (most commonly UTF-8) are even more complicated. There are few fonts in iso10646-1, the Unicode encoding, and they only contain a subset of the available glyphs (and are often fixed-width designed for use in terminals). In such locales fontsets are used, made up of fonts encoded in other encodings. If the locale you are using has an entry in the XLC_LOCALE directory (typically /usr/share/X11/locale), it is likely that all you need to do is to pick a suitable font specification that has fonts in the encodings specified there. If not, you may have to get hold of a suitable locale entry for X11. This may mean that, for example, Japanese text can be displayed when running in ja_JP.UTF-8 but not when running in en_GB.UTF-8 on the same machine (although on some systems many UTF-8 X11 locales are aliased to en_US.UTF-8 which covers several character sets, e.g. ISO 8859-1 (Western European), JISX0208 (Kanji), KSC5601 (Korean), GB2312 (Chinese Han) and JISX0201 (Kana)).\nOn some systems scalable fonts are available covering a wide range of glyphs. One source is TrueType/OpenType fonts, and these can provide high coverage. Another is Type 1 fonts: the URW set of Type 1 fonts provides standard typefaces such as Helvetica with a larger coverage of Unicode glyphs than the standard X11 bitmaps, including Cyrillic. These are generally not part of the default install, and the X server may need to be configured to use them. They might be under the X11 fonts directory or elsewhere, for example,\n/usr/share/fonts/default/Type1\n/usr/share/fonts/ja/TrueType"
  },
  {
    "objectID": "Platform-notes.html#linux",
    "href": "Platform-notes.html#linux",
    "title": "Appendix C — Platform notes",
    "section": "C.2 Linux",
    "text": "C.2 Linux\nLinux is the main development platform for R, so compilation from the sources is normally straightforward with the most common compilers and libraries.33 For example, glibc: other C libraries such as musl (as used by Alpine Linux) have been used but are not routinely tested.\nThis section is about the GCC compilers: gcc/gfortran/g++.\nRecall that some package management systems (such as RPM and deb) make a distinction between the user version of a package and the developer version. The latter usually has the same name but with the extension -devel or -dev: you need both versions installed. So please check the configure output to see if the expected features are detected: if for example readline is missing add the developer package. (On most systems you will also need ncurses and its developer package, although these should be dependencies of the readline package(s).) You should expect to see in the configure summary\n  Interfaces supported:      X11, tcltk\n  External libraries:        pcre2, readline, curl\n  Additional capabilities:   PNG, JPEG, TIFF, NLS, cairo, ICU\nWhen R has been installed from a binary distribution there are sometimes problems with missing components such as the Fortran compiler. Searching the R-help archives will normally reveal what is needed.\nIt seems that ix86 Linux accepts non-PIC code in shared libraries, but this is not necessarily so on other platforms, in particular on 64-bit CPUs such as x86_64. So care can be needed with BLAS libraries and when building R as a shared library to ensure that position-independent code is used in any static libraries (such as the Tcl/Tk libraries, libpng, libjpeg and zlib) which might be linked against. Fortunately these are normally built as shared libraries with the exception of the ATLAS BLAS libraries.\nThe default optimization settings chosen for CFLAGS etc are conservative. It is likely that using -mtune will result in significant performance improvements on recent CPUs: one possibility is to add -mtune=native for the best possible performance on the machine on which R is being installed. It is also possible to increase the optimization levels to -O3: however for many versions of the compilers this has caused problems in at least one CRAN package.\nDo not use -O3 with gcc 11.0 or 11.1: it mis-compiles code resulting in plausible but incorrect results. (This was seen in package MASS but has been worked around there as from version 3.1-57.)\nFor comments on ix86 builds (including 32-bit builds on x86_64) see the version of this manual for R 4.3.x.\nTo build a 64-bit version of R on ppc64 (also known as powerpc64) with gcc 4.1.1, Ei-ji Nakama used\nCC=\"gcc -m64\"\nCXX=\"gxx -m64\"\nFC=\"gfortran -m64\"\nCFLAGS=\"-mminimal-toc -fno-optimize-sibling-calls -g -O2\"\nFFLAGS=\"-mminimal-toc -fno-optimize-sibling-calls -g -O2\"\nthe additional flags being needed to resolve problems linking against libnmath.a and when linking R as a shared library.\nThe setting of the macro SAFE_FFLAGS may need some help. It should not need additional flags on platforms other than 68000 (not likely to be encountered) and ix86. For the latter, if the Fortran compiler is GNU (gfortran or possibly g77) the flags\n-msse2 -mfpmath=sse\nare added: earlier versions of R added -ffloat-store and this might still be needed if a ix86 CPU is encountered without SSE2 support. Note that it is a replacement for FFLAGS, so should include all the flags in that macro (except perhaps the optimization level).\nAdditional compilation flags can be specified for added safety/security checks. For example Fedora adds\n-Werror=format-security -Wp,-D_FORTIFY_SOURCE=3 -Wp,-D_GLIBCXX_ASSERTIONS\n-Fexceptions -fstack-protector-strong -fasynchronous-unwind-tables\n-fstack-clash-protection -fcf-protection\nto all the C, C++ and Fortran compiler flags (even though _GLIBCXX_ASSERTIONS is only for C++ in current GCC and glibc and none of these are documented for gfortran). Use of _GLIBCXX_ASSERTIONS will link abort and printf into almost all C++ code, and R CMD check --as-cran will warn.\n\nC.2.1 Clang\nR has been built with Linux ix86 and x86_64 C and C++ compilers (https://clang.llvm.org) based on the Clang front-ends, invoked by CC=clang CXX=clang++, together with gfortran. These take very similar options to the corresponding GCC compilers.\nThis has to be used in conjunction with a Fortran compiler: the configure code will remove -lgcc from FLIBS, which is needed for some versions of gfortran.\nThe current out-of-the-box default for clang++ is to use the C++ runtime from the installed g++. Using the runtime from the libc++ project (Fedora RPM libcxx-devel) via -stdlib=libc++ has also been tested.\nRecent versions have (optional when built) OpenMP support.44 This also needs the OpenMP runtime which has sometimes been distributed separately.\nThere are problems mixing clang 15.0.0 and later built as default on Linux to produce PIE code and gfortran 11 or later, which does not. One symptom is that configure does not detect FC_LEN_T, which can be overcome by setting\nFPIEFLAGS=-fPIE\nin config.site. (As from R 4.2.2 configure tries that value if it is unset.)\n\n\nC.2.2 flang\nThe name flang has been used for two projects: this is about the sub-project of LLVM which builds a Fortran compiler and runtime libraries. The compiler is currently named flang-new but has been announced to be renamed to flang when more nearly complete (and at some earlier point in its development was known as f18).\nThe version in LLVM 16 was able to build R on x86_64 Linux with\nFC=/path/to/flang-new\nwith the matching clang used as the C compiler, and the build passed make check-all. There is also support for aarch64 and ppc64le Linux, but these have not been tested with R.\n\n\nC.2.3 Intel compilers\nIn late 2020 Intel revamped their C/C++ compilers (and later their Fortran compiler) to use an LLVM back-end (and for the C/C++ compilers, a modified version of clang as the front-end). Those compilers are only for x86_64: the earlier (now called ‘Classic’) compilers were discontinued in late 2023 (and are covered in the version of this manual for R 4.3.x).\nThe compilers are now all under Intel’s ‘oneAPI’ brand. The revamped ones are icx, icpx and ifx; they are identified by the C/C++ macro __INTEL_LLVM_COMPILER (and do not define __INTEL_COMPILER: they also define __clang__ and __clang_major__).\nThe C++ compiler uses the system’s lidstdc++ as its runtime library rather than LLVM’s libc++.\nStandalone installers (which are free-of-charge) are available from https://www.intel.com/content/www/us/en/developer/articles/tool/oneapi-standalone-components.html: they are also part of the oneAPI Base and HPC (for Fortran) ToolKits.\nWe tried the compilers in oneAPI 2024.0.0 and 2023.x.y using (the paths do differ by compiler version)\nIP=/path/to/compilers/bin/\nCC=$IP/icx\nCXX=$IP/icpx\nFC=$IP/ifx\nCFLAGS=\"-O3 -fp-model precise -Wall -Wstrict-prototypes\"\nC17FLAGS=\"-O3 -fp-model precise -Wall -Wno-strict-prototypes\"\nFFLAGS=\"-O3 -fp-model precise -warn all,noexternals\"\nFCFLAGS=\"-free -O3 -fp-model precise -warn all,noexternals\"\nCXXFLAGS=\"-O3 -fp-model precise -Wall\"\nLDFLAGS=\"-L/path/to/compilers/compiler/lib -L/usr/local/lib64\"\nbut the build segfaulted in the checks (in complex arithmetic in tests/lapack.R).\nIntel document building R with MKL: for the Intel compilers this needed something like\nMKL_LIB_PATH=/path/to/intel_mkl/mkl/lib/intel64\nexport LD_LIBRARY_PATH=\"$MKL_LIB_PATH\"\nMKL=\"-L${MKL_LIB_PATH} -lmkl_intel_lp64 -lmkl_core -lmkl_sequential\"\n./configure --with-blas=\"$MKL\" --with-lapack\nand the build passed its checks with MKL 2023.2.0 (but not 2024.0 on the hardware tested). It may also be possible to use a compiler option like -qmkl=sequential.\nOne quirk is that the Intel Fortran compilers do not accept .f95 files, only .f90, for free-format Fortran. configure adds -Tf which tells the compiler this is indeed a Fortran file (and needs to immediately precede the file name), but -free is needed to say it is free-format. Hence setting the FCFLAGS macro.\nThe compilers have many options: as the C/C++ and Fortran compilers have different origins for their front-ends, there is little consistency in their options. (The C/C++ compilers support ‘all’ clang options even if undocumented for icx/icpc, such as -Wno-strict-prototypes above, However it is unclear for which version of clang: the Intel manual suggests checking icx -help.) The C/C++ compilers support clang-style LTO: it is not clear if the Fortran one does.\nFor some versions, including 2023.2.0, all CPU times in e.g. proc.time() are reported as zero. If you see this, uncomment the INTEL_ICX_FIX setting in config.site and re-build.\nThe preferred Fortran standard for ifx can be set by one of -std90, -std95, -std03, -std08 or -std18 (and variants). However, this is documented to only affect warnings on non-standard features: the default is no such warnings.\nWarning to package maintainers: the Intel Fortran compiler interprets comments intended for Visual Fortran5 like5 as the ‘Classic’ compiler has been known on Windows.\n!DEC$ ATTRIBUTES DLLEXPORT,C,REFERENCE,ALIAS:'kdenestmlcvb' :: kdenestmlcvb\nThe DLLEXPORT gives a warning but the remainder silently generates incorrectly named entry points. Such comment lines need to be removed from code for use with R (even if using Intel Fortran on Windows)."
  },
  {
    "objectID": "Platform-notes.html#macos",
    "href": "Platform-notes.html#macos",
    "title": "Appendix C — Platform notes",
    "section": "C.3 macOS",
    "text": "C.3 macOS\nThe instructions here are for Intel 64-bit (x86_64) or ‘Apple Silicon’ (arm64) builds on macOS 11 (Big Sur), 12 (Monterey) and 13 (Ventura). (They may well work on Intel macOS 10.14 or 10.15, but are untested there.)\n\nC.3.1 Prerequisites\nThe Intel components install into /opt/R/x86_64, the Apple silicon ones into /opt/R/arm64. This may not exist6 so it is simplest to first create the directory and adjust its ownership if desired: for example by6 it will if R has been installed from CRAN since R 4.3.0.\nsudo mkdir -p /opt/R/arm64\nsudo chown -R $USER /opt/R\nAlso, add /opt/R/x86_64/bin or /opt/R/arm64/bin to your path.\nDefine an appropriate variable in your Terminal:\nset LOCAL=/opt/R/x86_64 # Intel\nset LOCAL=/opt/R/arm64  # Apple Silicon\nto use the code snippets here.\nThe following are essential to build R:\n\nApple’s ‘Command Line Tools’: these can be (re-)installed by running xcode-select --install in a terminal.\nIf you have a fresh OS installation, running e.g. make in a terminal will offer the installation of the command-line tools. If you have installed Xcode, this provides the command-line tools. The tools may need to be reinstalled when macOS is upgraded, as upgrading may partially or completely remove them.\nThe Command Line Tools provide C and C++ compilers derived from LLVM’s clang but nowadays known as ‘Apple clang’ with different versioning (so Apple clang 14 is unrelated to LLVM clang 14).\nA Fortran compiler. See Fortran compiler.\nBinary components pcre27 and xz (for liblzma) from https://mac.r-project.org/bin/. There is an R script there to help with installing all the needed components. (At the time of writing install.libs(\"r-base-dev\") installed neither readline5 nor those needed to support Pango.)\nIntel users want the darwin20 components: the darwin17 ones are for macOS 10.13–10.15.\nOr this can be done manually, by for example\ncurl -OL https://mac.r-project.org/bin/darwin20/x86_64/pcre2-10.42-darwin.20-x86_64.tar.xz\nsudo tar -xvzf pcre2-10.42-darwin.20-x86_64.tar.gz -C /\ncurl -OL https://mac.r-project.org/bin/darwin20/x86_64/xz-5.4.2-darwin.20-x86_64.tar.xz\nsudo tar -xvzf xz-5.4.2-darwin.20-x86_64.tar.xz -C /\n(sudo is not needed if your account owns /opt/R/x86_64 or /opt/R/arm64 as appropriate.)\nMessages like opt/R/: Can't restore time should be ignored.\n\n7 If compiling it from source on arm64, pcre2 (at least up to version 10.39) needs to be built without JIT support (the default) as the R build segfaults if that is enabled, so do run make check on your build.and desirable\n\nComponent readline5.8 If readline is not present, the emulation in Apple’s version of libedit (aka editline) will be used: if you wish to avoid that, configure with --without-readline.\nComponents jpeg, libpng, pkgconfig, tiff and zlib-system-stub from https://mac.r-project.org/bin// for the full range of bitmapped graphics devices. (Some builds of tiff may require libwebp and/or openjpeg.)\nAn X sub-system unless configuring using --without-x: see https://www.xquartz.org/. R’s configure script can be told to look for X11 in XQuartz’s main location of /opt/X11, e.g. by\n--x-includes=/opt/X11/include --x-libraries=/opt/X11/lib\nBe wary of pre-release versions of XQuartz, which may be offered as an update.\nAn Objective-C compiler, as provided by clang in the Command Line Tools: this is needed for the quartz() graphics device.\nUse --without-aqua if you want a standard Unix-alike build: apart from disabling quartz() and the ability to use the build with R.APP, it also changes the default location of the personal library (see ?.libPaths).\nA Tcl/Tk installation, See Tcl/Tk headers and libraries.\nSupport for Cairo-based graphics devices. See Cairo graphics.\nA TeX installation. See Other libraries.\ntexi2any from a texinfo distribution, which requires perl (currently a default part of macOS but it has been announced that it may not be in future). A version of texi2any has been included in the binary distribution of R and there is a texinfo component at https://mac.r-project.org/bin/.\n\n8 For licence reasons this is version 5.2 of readline: for those who want a more recent version it is straightforward to compile it from its sources.To build R itself from the sources with the C/C++ compilers in the Command Line Tools (or Xcode) and gfortran from the installer mentioned below, use a file config.site containing\nCC=clang\nOBJC=$CC\nFC=\"/opt/gfortran/bin/gfortran -mtune=native\"\nCPPFLAGS='-isystem $LOCAL/include'\nCXX=clang++\nand configure by something like\n./configure -C \\\n--enable-R-shlib --enable-memory-profiling \\\n--x-includes=/opt/X11/include --x-libraries=/opt/X11/lib \\\n--with-tcl-config=$LOCAL/lib/tclConfig.sh \\\n--with-tk-config=$LOCAL/lib/tkConfig.sh \\\nPKG_CONFIG_PATH=$LOCAL/lib/pkgconfig:/usr/lib/pkgconfig\n(See below for other options for Tcl/Tk.) For an arm64 build further flags are desirable in config.site:\nCFLAGS=\"-falign-functions=8 -g -O2\"\nFFLAGS=\"-g -O2 -mmacos-version-min=11.0\"\nFCFLAGS=\"-g -O2 -mmacos-version-min=11.0\"\n(the first flag in CFLAGS is needed to inter-work with the gfortran without segfaulting in some packages, and some builds of gfortran have targetted the current version of macOS (unlike clang, causing linker warnings).\nTo install packages using compiled code one needs the Command Line Tools (or Xcode) and appropriate compilers, e.g. the C/C++ compilers from those tools and/or gfortran. Some packages have further requirements such as component pkgconfig (and to set PKG_CONFIG_PATH= as above).\nA subversion client can be obtained from https://mac.r-project.org/tools/, for example by\ncurl -OL https://mac.r-project.org/tools/subversion-1.14.0-darwin15.6.tar.gz\ntar xf subversion-1.14.0-darwin15.6.tar.gz\nsudo cp subversion-1.14.0-darwin15.6/svn $LOCAL/bin\n(There also an arm64 version on that web page.)\nIf building software or installing source packages with cmake (or a non-Apple make) for ‘Apple Silicon’ ensure it contains the arm64 architecture (use file to be sure). Running Apple compilers from an x86_64 executable will generate x86_64 code ….\nUpdating an arm64 build may fail because of the bug described at https://openradar.appspot.com/FB8914243 but ab initio builds work. This has been far rarer since macOS 13.\nIf you are using the macOS 13 SDK9, you may need to add something like -mmacos-version-min=12.0 to CFLAGS.9 ls -l xcrun -show-sdk-path in a terminal will show you which SDK is selected.\nLinker warnings like\nld: warning: could not create compact unwind for _sort_:\n   register 26 saved somewhere other than in frame\nld: warning: ld: warning:\n   could not create compact unwind for _arcoef_: registers 23 and 24 not saved contiguously in frame\nld: warning: could not create compact unwind for ___emutls_get_address:\n   registers 23 and 24 not saved contiguously in frame\ncan be ignored. These stem from compiled Fortran code, including its run-time libraries.\nThe default security settings can make it difficult to install Apple packages which have not been ‘notarized’10 by Apple. And not just packages, as this has been seen for executables contained in tarballs/zipfiles (for example, for pandoc). Usually one can use Open With (Control/right/two-finger-click in Finder), then select Installer and Open if you get a further warning message.10 See https://developer.apple.com/documentation/xcode/notarizing_macos_software_before_distribution.\nIf you run into problems with ‘quarantine’ for tarballs downloaded in a browser, consider using curl -OL to download (as illustrated above) or xattr -c to remove extended attributes.\nconfigure defaults to --with-internal-tzcode on macOS. The native implementation used to be unusable on earlier versions (with a 32-bit time_t and/or timezone tables missing information beyond the 32-bit range). For, e.g., macOS 12.6, option --without-internal-tzcode can be used to override this and R contains sufficient workarounds (for example, the native code fails to recognize dates with a negative tm_year, that is dates before 1900) for R to pass its checks. However, there are discrepancies, notably in Europe in the 1900s and 1940s, even though the Olson database contains the correct information.\n\n\nC.3.2 Fortran compiler\nThere is ‘universal’ (Intel and arm64) build of gfortran 12.2 at https://mac.r-project.org/tools/gfortran-12.2-universal.pkg. This installs into /opt/gfortran.\nThe /opt/gfortran/SDK symlink should point to the desired path to the SDK (defaults to the command line tools SDK). This can be updated by running /opt/gfortran/bin/gfortran-update-sdk or manually. If the symlink is broken, the driver will issue a warning and use xcrun -show-sdk-path to try to find an SDK and use its path. (The SDK path is used when using gfortran to link, so not when building R but when installing a few packages.)\n\n\nC.3.3 Cairo graphics\nCairo-based graphics devices such as cairo_ps, cairo_pdf, X11(type = \"cairo\") and the Cairo-based types of devices bmp jpeg, png and tiff are not the default on macOS, and much less used than the Quartz-based devices. However, the only SVG device in the R distribution, svg, is based on Cairo.\nSupport for Cairo is optional and can be added in several ways, all of which need pkg-config. configure will add Cairo support if pkg-config finds package cairo unless --without-cairo is used.\nA way to statically link Cairo is by downloading and unpacking components cairo, fontconfig, freetype, pixman and zlib-system-stub (and do not have /opt/X11/lib/pkgconfig in PKG_CONFIG_PATH). Some static builds of fontconfig need libxml2 (from component xml2) and others expat, supplied by macOS but needing a file $LOCAL/lib/pkgconfig/expat.pc along the lines of\nName: expat\nVersion: 2.2.8\nDescription: expat XML parser\nURL: http://www.libexpat.org\nLibs: -lexpat\nCflags: \nNote that the list of components is liable to change: running pkg-config cairo --exists --print-errors should tell you if any others are required.\nThe best font experience of Cairo graphics will be to use it in combination with Pango which will match that supported on most other Unix-alikes. configure uses pkg-config to determine if all the external software required by both Pango and Cairo is available: running pkg-config pangocairo --exists --print-errors should show if the installation suffices and if not, what is missing. At the time of writing using pre-built components cairo, fontconfig, freetype, ffi, fribidi, gettext, icu, glib, harfbuzz, pango, pcre, pixman and xml2 sufficed.\n\n\nC.3.4 Other C/C++ compilers\nOther distributions of clang may be available from https://github.com/llvm/llvm-project/releases/ (recently only for arm64 and usually unsigned/not notarized which makes them hard to use). In particular, these include support for OpenMP which Apple clang does not. Some of these have included support for the ASAN and UBSAN sanitizers.\nSuppose one of these distributions is installed under $LOCAL/llvm. Use a file config.site containing\nCC=\"$LOCAL/llvm/bin/clang -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk\"\nCXX=\"$LOCAL/llvm/bin/clang++ -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk\"\nOBJC=$CC\nFC=$LOCAL/gfortran/bin/gfortran\nLDFLAGS=\"-L$LOCAL/llvm/lib -L$LOCAL/lib\"\nR_LD_LIBRARY_PATH=$LOCAL/llvm/lib:$LOCAL/lib\nShould the location of the SDK change (or where Xcode provides the SDK rather than the Command Line Tools), it can be found by running xcrun -show-sdk-path.\nThe care to specify library paths is to ensure that the OpenMP runtime library, here $LOCAL/llvm/lib/libomp.dylib, is found when needed. If this works, you should see the line\nchecking whether OpenMP SIMD reduction is supported... yes\nin the configure output. Also, R_LD_LIBRARY_PATH needs to be set to find the latest version of the C++ run-time libraries rather than the system ones.\nIt is usually possible to build R with GCC (built from the sources, from a gfortran distribution, from Homebrew, …). When last tested11 it was not possible to use gcc to build the quartz() device, so configure --without-aqua may be required.11 with gcc 10.2.\nIt is usually possible to add some OpenMP support to the Apple clang compilers: see https://mac.r-project.org/openmp/. Note that that approach is somewhat fragile as it needs a libomp.dylib library matching the version of the compiler used—and for example at the time of writing none was offered for the current compilers in Xcode/CLT 14.3 nor 15.\n\n\nC.3.5 Other libraries\nPre-compiled versions of many of the Useful libraries and programs are available from https://mac.r-project.org/bin//.\nLooking at the top of /Library/Frameworks/R.framework/Resources/etc/Makeconf will show the compilers and configuration options used for the CRAN binary package for R: at the time of writing the non-default options\n--enable-memory-profiling --enable-R-framework\n--x-libraries=/opt/X11/lib --x-includes=/opt/X11/include\nwere used. (--enable-R-framework implies --enable-R-shlib.)\nThe main TeX implementation used by the developers is MacTeX12 (https://www.tug.org/mactex/): the full installation is about 8.5GB, but a much smaller version (‘Basic TeX’) is available at https://www.tug.org/mactex/morepackages.html to which you will need to add some packages to build R, e.g. for the 2022 version we needed to add13 helvetic, inconsolata and texinfo which brought this to about 310MB.14 TeX Live Utility (available via the MacTeX front page) provides a graphical means to manage TeX packages. These contain executables which run natively on both x86_64 and arm64.12 An essentially equivalent TeX installation can be obtained by the Unix TeX Live installation scripts.13 E.g. via tlmgr install helvetic inconsolata texinfo .14 Adding all the packages needed to check CRAN increased this to about 600MB.\nChecking packages thoroughly requires ghostscript (part of the full MacTeX distribution or separately from https://www.tug.org/mactex/morepackages.html) and qpdf (from https://mac.r-project.org/bin//, a version of which is in the bin directory of a binary installation of R, usually /Library/Frameworks/R.framework/Resources/bin/qpdf).\nR CMD check --as-cran makes use of ‘HTML Tidy’. macOS has a version in /usr/bin/tidy dating from 2006 which is far too old and is skipped. Up-to-date versions can be installed from http://binaries.html-tidy.org/.\nOne macOS quirk is that the default path has /usr/local/bin after /usr/bin, contrary to common practice on Unix-alikes. This means that if you install tools from the sources they will by default be installed under /usr/local and not supersede the system versions.\nParallel installation of packages will make use of the utility timeout if available. A dual-architecture build can be downloaded from https://www.stats.ox.ac.uk/pub/bdr/timeout: make it executable (chmod 755 timeout) and put it somewhere on your path.\n\n\nC.3.6 Accelerate\nThe Accelerate library15 can be used via the configuration option15 https://developer.apple.com/documentation/accelerate.\n--with-blas=\"-framework Accelerate\"\nto provide potentially higher-performance versions of the BLAS and LAPACK routines.16 This includes a full LAPACK which can be used via --with-lapack: however, the version of LAPACK it contains has often been seriously old (and is not used unless --with-lapack is specified). Some CRAN builds of R can be switched17 to use Accelerate’s BLAS.16 It has been reported that for some non-Apple toolchains CPPFLAGS needed to contain -D__ACCELERATE__: not needed for clang from LLVM.17 https://cran.r-project.org/bin/macosx/RMacOSX-FAQ.html#Which-BLAS-is-used-and-how-can-it-be-changed_003f\nAs from macOS 13.3, the BLAS and LAPACK libraries under the Accelerate framework are ‘now inline with reference version 3.9.1’.18 However, this has been done by naming new entry points and so only accessible via their C headers. That version can be used for BLAS calls via configure option --with-newAccelerate: it requires at least macOS 13.3 and SDK 13.3 (from Xcode/CLT 14.3). To use it for both BLAS and LAPACK calls, configure with --with-newAccelerate=lapack. These options cannot be used with others such as --with-blas and --with-lapack.18 Released 2021-04-01.\nThreading in Accelerate is controlled by ‘Grand Central Dispatch’19 and is said not to need user control. Test nls.R in package stats has often failed with the Accelerate BLAS on Intel macOS. All versions of Accelerate show differences from the reference BLAS (and most others) in the use of NA vs NaN and a substantial number of R packages fail their checks.19 E.g., https://en.wikipedia.org/wiki/Grand_Central_Dispatch .\n\n\nC.3.7 OpenBLAS\nR has been built on arm64 using OpenBLAS 0.3.24 (sources from https://github.com/OpenMathLib/OpenBLAS/releases) by symlinking /opt/OpenBLAS/lib/libopenblas.dylib to lib/libRblas.dylib (see Shared BLAS).\nOn macOS, a default build of OpenBLAS uses pthreads (as macOS does not have OpenMP) with the number of threads controlled by environment variable OPENBLAS_NUM_THREADS. On an M1 Pro this defaulted to 10 threads (there are 8 ‘performance’ cores and 2 ‘efficiency cores’) and we saw a 9x speedup over the reference BLAS on a large SVD (which was slightly faster than Accelerate).\n\n\nC.3.8 Tcl/Tk headers and libraries\nIf you plan to use the tcltk package for R, you will need to install a distribution of Tcl/Tk. There are two alternatives. If you use R.APP you will want to use X11-based Tcl/Tk (as used on other Unix-alikes), which is installed under $LOCAL/lib as part of the CRAN binary for R.20 This may need configure options20 Just that component can be selected from the installer for R: at the ‘Installation Type’ screen select ‘Customise’ and then just the ‘Tcl/Tk 8.6.11’ component.\n--with-tcltk=$LOCAL/lib\nor\n--with-tcl-config=$LOCAL/lib/tclConfig.sh\n--with-tk-config=$LOCAL/lib/tkConfig.sh\nNote that this requires a matching XQuartz installation.\nThere is also a native (‘Aqua’) version of Tcl/Tk which produces widgets in the native macOS style: this will not work with R.APP because of conflicts over the macOS menu, but for those only using command-line R this provides a much more intuitive interface to Tk for experienced Mac users. Earlier versions of macOS came with an Aqua Tcl/Tk distribution but these were often not at all recent versions of Tcl/Tk. It is better to install Tcl/Tk 8.6.x from the sources21 or a binary distribution from https://www.activestate.com/products/tcl/. For the latter, configure R with21 Configure Tk with --enable-aqua.\n--with-tcl-config=/Library/Frameworks/Tcl.framework/tclConfig.sh \n--with-tk-config=/Library/Frameworks/Tk.framework/tkConfig.sh\nIf you need to find out which distribution of Tk is in use at run time, use\nlibrary(tcltk)\ntclvalue(.Tcl(\"tk windowingsystem\"))  # \"x11\" or \"aqua\"\nNote that some Tcl/Tk extensions only support the X11 interface: this includes Tktable and the CRAN package tkrplot.\n\n\nC.3.9 Java\nmacOS does not comes with an installed Java runtime (JRE) and a macOS upgrade may remove one if already installed: it is intended to be installed at first use. Check if a JRE is installed by running java -version in a Terminal window: if Java is not installed22 this should prompt you to install it.23 Builds of OpenJDK may also be available, e.g. from Adoptium, Azul or https://jdk.java.net/. We recommend you install a version with long-term support, e.g. 11 or 17 or (expected in 2023-09) 21 but not 12–16 nor 18–20 which have/had a 6-month lifetime. (Note that these sources may use unusual designations for Intel macOS builds such as x86 64-bit and x64.)22 In the unlikely event that the version reported does not start with 1.8.0, 11 or higher you need to update your Java.23 Not at the time of writing for arm64.\nBinary distributions of R are built against a specific version (e.g. 11.0.6 or 17.0.1) of Java so sudo R CMD javareconf will likely be needed to be run before using Java-using packages.\nTo see what compatible versions of Java are currently installed, run the appropriate one of\n/usr/libexec/java_home -V -a x86_64\n/usr/libexec/java_home -V -a arm64\nIf needed, set the environment variable JAVA_HOME to choose between these, both when R is built from the sources and when R CMD javareconf is run.\nConfiguring and building R both looks for a JRE and for support for compiling JNI programs (used to install packages rJava and JavaGD); the latter requires a JDK (Java SDK). Most distributions of Java 9 or later are of a full JDK.\nThe build process tries to fathom out what JRE/JDK to use, but it may need some help, e.g. by setting environment variable JAVA_HOME. To select a build from Adoptium set e.g.\nJAVA_HOME=/Library/Java/JavaVirtualMachines/termurin-17.jdk/Contents/Home\nin config.site. For Java 17 from https://jdk.java.net/ (which is no longer available), use\nJAVA_HOME=/path/to/jdk-17.jdk/Contents/Home\nFor an arm64 build, the earliest Java version which is officially supported is 17. The currently simplest way to install Java is from Adoptium (who call the architecture aarch64): this installs into an Apple-standard location and so works with /usr/bin/java. Other builds are available from https://www.azul.com/downloads/zulu-community/?os=macos&architecture=arm-64-bit&package=jdk and from OpenJDK at https://jdk.java.net/, for which JAVA_HOME may need to be set both when configuring R and at runtime.\nTo use Java (specifically, binary package rJava) with a CRAN (x86_64) binary distribution of R on arm64 macOS, install an Intel build of a Java JRE from one of the sites linked above, then run sudo R CMD javareconf.\nNote that it is necessary to set the environment variable NOAWT to 1 to install many of the Java-using packages.\n\n\nC.3.10 Frameworks\nThe CRAN build of R is installed as a framework, which is selected by the option\n./configure --enable-R-framework\n(This is intended to be used with an Apple toolchain: others may not support frameworks correctly but those from LLVM do.)\nIt is only needed if you want to build R for use with the R.APP console, and implies --enable-R-shlib to build R as a dynamic library. This option configures R to be built and installed as a framework called R.framework. The default installation path for R.framework is /Library/Frameworks but this can be changed at configure time by specifying the flag --enable-R-framework[=DIR] (or --prefix) or at install time via\nmake prefix=/where/you/want/R.framework/to/go install\nNote that installation as a framework is non-standard (especially to a non-standard location) and Unix utilities may not support it (e.g. the pkg-config file libR.pc will be put somewhere unknown to pkg-config).\n\n\nC.3.11 Building R.app\nBuilding the R.APP GUI console is a separate project, using Xcode. Before compiling R.APP make sure the current version of R is installed in /Library/Frameworks/R.framework and is working at the command-line (this can be a binary install).\nThe current sources can be checked out by\nsvn co https://svn.r-project.org/R-packages/trunk/Mac-GUI\nand built by loading the R.xcodeproj project (select the R target and a suitable configuration), or from the command-line by e.g.\nxcodebuild -target R -configuration Release\nSee also the INSTALL file in the checkout or directly at https://svn.r-project.org/R-packages/trunk/Mac-GUI/INSTALL.\nR.APP does not need to be installed in any specific way. Building R.APP results in the R.APP bundle which appears as one R icon. This application bundle can be run anywhere and it is customary to place it in the /Applications folder.\n\n\nC.3.12 Building binary packages\nCRAN macOS binary packages are distributed as tarballs with suffix .tgz to distinguish them from source tarballs. One can tar an existing installed package, or use R CMD INSTALL --build.\nHowever, there are some important details.\n\nCurrent CRAN macOS distributions are targeted at Big Sur so it is wise to ensure that the compilers generate code that will run on Big Sur or later. With the recommended compilers we can use\nCC=\"clang -mmacosx-version-min=11.0\"\nCXX=\"clang++ -mmacosx-version-min=11.0\"\nFC=\"/opt//gfortran/bin/gfortran -mmacosx-version-min=11.0\"\nor set the environment variable\nexport MACOSX_DEPLOYMENT_TARGET=11.0\nUsing the flag -Werror=partial-availability can help trigger compilation errors on functionality not in Big Sur.\nCheck that any compiled code is not dynamically linked to libraries only on your machine, for example by using otool -L or objdump -macho -dylibs-used. This can include C++ and Fortran run-time libraries under /opt/R/x86_64/lib or /opt/R/arm64/lib: one can use install_name_tool to point these at system versions or those shipped with R, for example\ninstall_name_tool -change /usr/local/llvm/lib/libc++.1.dylib \\\n/usr/lib/libc++.1.dylib \\\npkg.so\n\ninstall_name_tool -change\n/opt/gfortran/lib/gcc/aarch64-apple-darwin20.0/12.2.0/libgfortran.5.dylib \\\n/Library/Frameworks/R.framework/Resources/lib/libgfortran.5.dylib \\\npkg.so\n\ninstall_name_tool -change\n/opt/gfortran/lib/gcc/aarch64-apple-darwin20.0/12.2.0/libquadmath.0.dylib \\\n/Library/Frameworks/R.framework/Resources/lib/libquadmath.0.dylib \\\npkg.so\n(where the details depend on the compilers and CRAN macOS R release).\nFor C++ code there is the possibility that calls will be generated to entry points not in the system /usr/lib/libc++.1.dylib. The previous step allows this to be tested against the system library on the build OS, but not against earlier ones. It may be possible to circumvent that by static linking to libc++.a and libc++abi.a by something like\nSHLIB_CXXLD = /usr/local/llvm/bin/clang\nPKG_LIBS = /usr/local/llvm/lib/libc++.a /usr/local/llvm/lib/libc++abi.a\nin src/Makevars. It would also be possible to static link the Fortran runtime libraries libgfortran.a and libquadmath.a should the Fortran compiler have later versions (but gfortran 8–13 all have version 5).\n\nThe CRAN binary packages are built with the Apple compiler on the oldest supported version of macOS, which avoids the first two and any issues with C++ libraries.\n\n\nC.3.13 Building for Intel on arm64\nShould one want to build R for Intel on an arm64 Big Sur Mac, add the target for the C and C++ compilers:\nCC=\"clang -arch x86_64\nOBJC=$CC\nCXX=\"clang++ -arch x86_64\"\nFC=\"/opt//gfortran/bin/gfortran -arch x86_64 -mtune=native -mmacosx-version-min=11\"\nand install the Fortran compiler and external software described above for Intel builds (and have /opt/R/x86_64/bin before /opt/R/arm64/bin in your path).\nTo set the correct architecture (which will be auto-detected as aarch64), use something like\n/path/to/configure --build=x86_64-apple-darwin20\n\n\nC.3.14 Installer\nThe scripts for the CRAN packaging of R can be found under https://svn.r-project.org/R-dev-web/trunk/QA/Simon/R4/: start with the README file in that directory."
  },
  {
    "objectID": "Platform-notes.html#freebsd",
    "href": "Platform-notes.html#freebsd",
    "title": "Appendix C — Platform notes",
    "section": "C.4 FreeBSD",
    "text": "C.4 FreeBSD\nThere have been few recent reports on FreeBSD: there is a ‘port’ at https://svnweb.freebsd.org/ports/head/math/R, currently last updated for R 4.0.4. Recent versions of FreeBSD use Clang and the libc++ C++ headers and runtime, but the ‘port’ has been configured to use GCC.\nUse of ICU for collation and the configure option --with-internal-tzcode are desirable workarounds."
  },
  {
    "objectID": "Platform-notes.html#openbsd",
    "href": "Platform-notes.html#openbsd",
    "title": "Appendix C — Platform notes",
    "section": "C.5 OpenBSD",
    "text": "C.5 OpenBSD\nIngo Feinerer installed R version 3.2.2 on OpenBSD 5.8 arch amd64 (their name for x86_64). Details of the build (and patches applied) are at https://cvsweb.openbsd.org/cgi-bin/cvsweb/ports/math/R/, currently updated for R 4.2.1."
  },
  {
    "objectID": "Platform-notes.html#cygwin",
    "href": "Platform-notes.html#cygwin",
    "title": "Appendix C — Platform notes",
    "section": "C.6 Cygwin",
    "text": "C.6 Cygwin\nThe 32-bit version never worked well enough to pass R’s make check, and residual support from earlier experiments was removed in R 3.3.0.\nThe 64-bit version was never supported."
  },
  {
    "objectID": "Platform-notes.html#new-platforms",
    "href": "Platform-notes.html#new-platforms",
    "title": "Appendix C — Platform notes",
    "section": "C.7 New platforms",
    "text": "C.7 New platforms\nThere are a number of sources of problems when installing R on a new hardware/OS platform. These include\nFloating Point Arithmetic: R requires arithmetic compliant with IEC 60559, also known as IEEE 754. This mandates the use of plus and minus infinity and NaN (not a number) as well as specific details of rounding. Although almost all current FPUs can support this, selecting such support can be a pain. The problem is that there is no agreement on how to set the signalling behaviour; Sun/Sparc, SGI/IRIX and ix86 Linux require no special action, FreeBSD requires a call to (the macro) fpsetmask(0) and OSF1 required that computation be done with a -ieee_with_inexact flag etc. With Intel compilers on 32-bit and 64-bit Intel machines, one has to explicitly disable flush-to-zero and denormals-are-zero modes. Some ARM processors including A12Z and M1 (Apple Silicon) by default use runfast mode, which includes flush-to-zero and default-nan and hence has to be disabled. With default-nan mode, the NaN payload used for representation of numeric NA values is lost even on simple operations with finite values. On a new platform you must find out the magic recipe and add some code to make it work. This can often be done via the file config.site which resides in the top level directory.\nBeware of using high levels of optimization, at least initially. On many compilers these reduce the degree of compliance to the IEEE model. For example, using -fast on the Oracle compilers has caused R’s NaN to be set incorrectly, and gccs -ffast-math and clangs -Ofast have given incorrect results.\nShared Objects: There seems to be very little agreement across platforms on what needs to be done to build shared objects. there are many different combinations of flags for the compilers and loaders. GNU libtool cannot be used (yet), as it currently does not fully support Fortran: one would need a shell wrapper for this). The technique we use is to first interrogate the X window system about what it does (using xmkmf), and then override this in situations where we know better (for tools from the GNU Compiler Collection and/or platforms we know about). This typically works, but you may have to manually override the results. Scanning the manual entries for cc and ld usually reveals the correct incantation. Once you know the recipe you can modify the file config.site (following the instructions therein) so that the build will use these options.\nIt seems that gcc 3.4.x and later on ix86 Linux defeat attempts by the LAPACK code to avoid computations entirely in extended-precision registers, so file src/modules/lapack/dlamc.f may need to be compiled without optimization or with additional flags. Set the configure variable SAFE_FFLAGS to the flags to be used for this file.\nIf you do manage to get R running on a new platform please let us know about it so we can modify the configuration procedures to include that platform.\nIf you are having trouble getting R to work on your platform please feel free to use the R-devel mailing list to ask questions. We have had a fair amount of practice at porting R to new platforms ...\nOne thing you might want to add for a new platform is the mapping of C/C++/Fortran calls to entry point names used for R CMD check. See https://svn.r-project.org/R-dev-web/trunk/sotools.txt for how to do so.\nFootnotes"
  }
]